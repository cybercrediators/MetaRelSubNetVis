{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/cy-graph.service.ts","webpack:///src/app/data-loader.service.ts","webpack:///src/app/patient.ts","webpack:///src/app/patients-response.ts","webpack:///src/app/threshold-response.ts","webpack:///src/app/threshold.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","max","AppComponent","httpClient","dataLoader","cyGraph","title","sideBarShown","activeMenuItem","nodes","patient","threshold","layout","download","impressum","objectKeys","Object","patients","metastatic","nonmetastatic","geMin","geMax","layoutNodeSize","layoutNodeColor","layoutNodeSizeOptions","rel","ge","layoutNodeColorOptions","geLevel","layoutAllNodes","layoutMtbNodes","downloadFormat","downloadTransparent","downloadScaleImageBy","searchNode","selectedNode","layoutOnlyShared","nodeSort","a","b","getThresholds","subscribe","data","thresholds","setThreshold","getPatients","setGeRange","getNetwork","network","subtypeCounts","occ","nodeInfo","forEach","node","initGraph","cyDiv","pat","setMetastaticPatient","updateNetwork","setNonMetastaticPatient","name","by","setSizeBy","setColorBy","shown","setShowOnlySharedNodes","setShowAllNodes","setShowMtbNodes","updateThreshold","column","filter","toLowerCase","indexOf","sort","localeCompare","undefined","index","splice","push","highlightNode","type","image","getImage","filename","selectedMetastaticPatient","selectedNonmetastaticPatient","fitGraphToViewport","toggleMenu","updateNodeSort","updateAllNodes","updateMtbNodes","updateSharedNodes","downloadImage","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","CyGraphService","colors","red","yellow","blue","green","gray","highlight","showAllNodes","showOnlySharedNodes","sizeBy","colorBy","layer","numberOfLayers","i","cy","container","nativeElement","elements","style","label","color","width","height","visibility","levelWidth","concentric","spacingFactor","metPat","layoutPatient","nonPat","updataShownNodes","showMtbNodes","connected","connectedEdges","batch","removeData","removeClass","removeSizeMap","minValue","maxValue","sizeMap","fontSizeMap","midPoint","colorMap1","colorMap2","minValueMet","maxValueMet","minValueNonMet","maxValueNonMet","midPointMet","midPointNonMet","colorMapMet1","colorMapMet2","colorMapNonMet1","colorMapNonMet2","clear","size","setSizeMap","getMinGe","getMaxGe","setColorMap","setColorDisc","patientData","score","selected","multiplier","getElementById","mtb","addClass","Math","min","setSplitColorMap","combinedPats","nodeId","length","visualizeTwo","visualizeOne","transparent","scaleBy","bgColor","png","bg","scale","jpg","fit","providedIn","DataLoaderService","patientsUrl","patientDataUrl","thresholdUrl","networkUrl","get","patientId","Patient","mfsYears","subtype","loadPatientData","minScore","reduce","previousValue","currentValue","maxScore","minGe","maxGe","getPatientData","PatientsResponse","map","ThresholdResponse","minThreshold","maxThreshold","Threshold","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import {Component, OnChanges, OnInit, AfterViewInit, ViewChild, ElementRef} from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport {PatientsResponse} from './patients-response';\nimport {DataLoaderService} from './data-loader.service';\nimport {Patient} from './patient';\nimport {CyGraphService} from './cy-graph.service';\nimport {ThresholdResponse} from './threshold-response';\nimport { saveAs} from 'file-saver';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent  implements AfterViewInit, OnChanges, OnInit {\n  public title = 'Patient Specific Molecular Sub-Networks Responsible for Metastasis in Breast Cancer';\n\n  sideBarShown = true;\n  activeMenuItem = {\n    nodes: false,\n    patient: true,\n    threshold: false,\n    layout: true,\n    download: false,\n    impressum: false\n  };\n  private cy;\n\n  @ViewChild('cy') cyDiv: ElementRef;\n\n  objectKeys = Object.keys;\n  thresholds: ThresholdResponse;\n\n  patients: PatientsResponse = {metastatic: [],\n                                nonmetastatic: [],\n                                geMin: 0,\n                                geMax: 15};\n\n  selectedMetastaticPatient: Patient;\n\n  selectedNonmetastaticPatient: Patient;\n  layoutNodeSize = 'rel';\n\n  layoutNodeColor = 'geLevel';\n  layoutNodeSizeOptions = {\n    rel: 'Relevance',\n    ge: 'Gene Expression'\n  };\n  layoutNodeColorOptions = {\n    geLevel: 'Gene Expression Level ',\n    ge: 'Gene Expression',\n    rel: 'Relevance'\n  };\n  layoutAllNodes = false;\n  layoutMtbNodes = true;\n\n  downloadFormat = 'png';\n  downloadTransparent = false;\n  downloadScaleImageBy = 1.0;\n  nodes = [];\n  searchNode = '';\n  selectedNode = [];\n  layoutOnlyShared = false;\n  nodeInfo: object;\n  subtypeCounts: object;\n  private nodeSort = 'name';\n\n  constructor(private httpClient: HttpClient,\n              private dataLoader: DataLoaderService,\n              private cyGraph: CyGraphService) {}\n\n  XOR(a: boolean, b: boolean) { return ( a || b ) && !( a && b ); }\n\n  ngOnChanges() {\n  }\n\n\n  ngOnInit() {\n    this.dataLoader.getThresholds().subscribe(data => {\n      this.thresholds = new ThresholdResponse(data);\n      this.cyGraph.setThreshold(this.thresholds);\n      // console.log('Multiplier1: ' + this.thresholds.multiplier);\n    });\n\n    this.dataLoader.getPatients().subscribe((data: PatientsResponse) => {\n      // console.log('Loaded patients:');\n      // console.log(data);\n      this.patients = new PatientsResponse(data, this.dataLoader);\n      this.cyGraph.setGeRange(this.patients.geMin, this.patients.geMax);\n    });\n  }\n\n  ngAfterViewInit() {\n    // console.log(\"Init Graph: \" + this.layoutNodeSize);\n    this.dataLoader.getNetwork().subscribe((network) => {\n      this.subtypeCounts = network.occ;\n      this.nodeInfo = {};\n      network.nodes.forEach((node) => {\n        this.nodeInfo[node.data.id] = node.occ;\n      });\n      this.cyGraph.initGraph(this.cyDiv, network, this.layoutNodeSize, this.layoutNodeColor);\n    });\n  }\n\n\n  setMetastaticPatient(pat: Patient) {\n    this.cyGraph.setMetastaticPatient(pat);\n    this.updateNetwork();\n  }\n  setNonMetastaticPatient(pat: Patient) {\n    this.cyGraph.setNonMetastaticPatient(pat);\n    this.updateNetwork();\n  }\n\n  toggleMenu(name: string) {\n    if (name === 'nodes') {\n      this.updateNetwork();\n    }\n    this.activeMenuItem[name] = !this.activeMenuItem[name];\n  }\n\n  updateNodeSize(by: string) {\n    // console.log('Change Node Size: ' + by);\n    this.cyGraph.setSizeBy(by);\n    this.updateNetwork();\n  }\n\n  updateNodeColor(by: string) {\n    // console.log('Change Node Color: ' + by);\n    this.cyGraph.setColorBy(by);\n    this.updateNetwork();\n  }\n\n  updateAllNodes(shown: boolean) {\n    if (this.layoutOnlyShared && shown) {\n      this.layoutOnlyShared = false;\n      this.cyGraph.setShowOnlySharedNodes(false);\n    }\n    this.cyGraph.setShowAllNodes(shown);\n    this.updateNetwork();\n  }\n\n  updateMtbNodes(shown: boolean) {\n    // console.log('MTB: ' + shown);\n    this.cyGraph.setShowMtbNodes(shown);\n  }\n\n  updateSharedNodes(shown: boolean) {\n    if (this.layoutAllNodes && shown) {\n      this.layoutAllNodes = false;\n      this.cyGraph.setShowAllNodes(false);\n    }\n    this.cyGraph.setShowOnlySharedNodes(shown);\n    this.updateNetwork();\n  }\n\n  updateThreshold(thresholds: ThresholdResponse) {\n    this.cyGraph.updateThreshold(thresholds);\n    this.updateNetwork();\n  }\n\n  updateNodeSort(column: string){\n    this.nodeSort = column;\n    this.updateNetwork();\n  }\n\n  updateNetwork() {\n    let nodes = this.cyGraph.getNetwork();\n    if (this.searchNode !== '') {\n      nodes = nodes.filter((node) => {\n        return (node.id.toLowerCase().indexOf(this.searchNode.toLowerCase()) !== -1);\n      });\n    }\n    if (this.nodeSort === 'name') {\n      nodes = nodes.sort((a, b) => {return a.id.localeCompare(b.id); });\n    } else {\n      nodes = nodes.sort((a, b) => {return this.nodeInfo[b.id][this.nodeSort] - this.nodeInfo[a.id][this.nodeSort]; });\n    }\n    this.nodes = nodes;\n  }\n\n  resetNodeSearch() {\n    this.searchNode = '';\n    this.updateNetwork();\n  }\n\n  highlightNode(node: string) {\n    // console.log('Highlight node: ' + node);\n    if(node === undefined) {\n      this.selectedNode = [];\n    } else {\n      const index = this.selectedNode.indexOf(node);\n      if (index > -1) {\n        this.selectedNode.splice(index, 1);\n      } else {\n        this.selectedNode.push(node);\n      }\n    }\n    this.cyGraph.highlightNode(this.selectedNode);\n  }\n\n  downloadImage(type: string) {\n    // console.log(type);\n    const image = this.cyGraph.getImage(type, this.downloadTransparent, this.downloadScaleImageBy);\n\n    let filename = 'test.' + type;\n    if (this.selectedMetastaticPatient === undefined && this.selectedNonmetastaticPatient === undefined){\n      filename = 'PPI_network.' + type;\n    } else if (this.selectedMetastaticPatient !== undefined && this.selectedNonmetastaticPatient === undefined) {\n      filename = this.selectedMetastaticPatient.name + '.' + type;\n    } else if (this.selectedMetastaticPatient === undefined && this.selectedNonmetastaticPatient !== undefined) {\n      filename = this.selectedNonmetastaticPatient.name + '.' + type;\n    } else {\n      filename = this.selectedMetastaticPatient.name + '_vs_' + this.selectedNonmetastaticPatient.name + '.' + type;\n    }\n    saveAs(image, filename);\n  }\n\n  fitGraphToViewport() {\n    this.cyGraph.fitGraphToViewport();\n  }\n}\n","<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <meta name=\"description\" content=\"Responsive sidebar template with sliding effect and dropdown menu based on bootstrap 3\">\n  <title>Sidebar template</title>\n  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\"\n        crossorigin=\"anonymous\">\n  <link href=\"https://use.fontawesome.com/releases/v5.13.0/css/all.css\" rel=\"stylesheet\">\n\n\n</head>\n\n<body>\n<div class=\"page-wrapper chiller-theme\" [class.toggled]=\"sideBarShown\">\n  <a id=\"show-sidebar\" class=\"btn btn-lg btn-dark\" href=\"#\" (click)=\"sideBarShown = true\">\n    <i class=\"fas fa-bars\"></i>\n  </a>\n  <nav id=\"sidebar\" class=\"sidebar-wrapper\">\n    <div class=\"sidebar-content\">\n      <div class=\"sidebar-brand\">\n        <a href=\"#\">Explore the Networks</a>\n        <div id=\"close-sidebar\" (click)=\"sideBarShown = false\">\n          <i class=\"fas fa-times\"></i>\n        </div>\n      </div>\n<!--&lt;!&ndash;      Info box    &ndash;&gt;-->\n<!--      <div class=\"sidebar-menu\">-->\n<!--        <ul>-->\n<!--          <li class=\"header-menu\">-->\n<!--            <span>Info</span>-->\n<!--          </li>-->\n<!--        </ul>-->\n<!--      </div>-->\n\n      <div class=\"sidebar-menu\">\n        <ul>\n          <li class=\"header-menu\">\n            <span>Settings</span>\n          </li>\n<!--Choose a Patient          -->\n          <li class=\"sidebar-dropdown\" [class.active]=\"activeMenuItem.patient\">\n            <a href=\"#\" (click)=\"toggleMenu('patient')\">\n              <i class=\"fas fa-hospital-user\"></i>\n              <span>Patients</span>\n<!--              <span class=\"badge badge-pill badge-warning\">New</span>-->\n            </a>\n            <div class=\"sidebar-submenu\" [style.display]=\"activeMenuItem.patient ? 'block':'none'\">\n              <ul>\n                <li class=\"row custom-form-group\">\n                  <div class=\"col-6 \">\n                    <p>\n                      <span>Metastatic Patient:</span>\n                      <select [(ngModel)]=\"selectedMetastaticPatient\" class=\"form-control\" (change)=\"setMetastaticPatient(selectedMetastaticPatient)\">\n                        <option class=\"dropdown-item\" selected [ngValue]=\"undefined\" ><hr/></option>\n                        <option class=\"dropdown-item\" *ngFor=\"let pat of patients.metastatic\" [ngValue]=\"pat\" >{{pat.name}} ({{pat.subtype}})</option>\n                      </select>\n                    </p>\n                    <span *ngIf=\"selectedMetastaticPatient !== undefined\">\n                      <p>Cancer Subtype: <br/><b>{{selectedMetastaticPatient.subtype}}</b></p>\n                      <p>Metastasis free Survival: <b>{{selectedMetastaticPatient.mfsYears}} years</b></p>\n                    </span>\n                  </div>\n                  <div class=\"col-6 \">\n                    <p>\n                      <span>Non-Metastatic Patient:</span>\n                      <select [(ngModel)]=\"selectedNonmetastaticPatient\" class=\"form-control\" (change)=\"setNonMetastaticPatient(selectedNonmetastaticPatient)\">\n                        <option class=\"dropdown-item\" selected [ngValue]=\"undefined\"><hr/></option>\n                        <option class=\"dropdown-item\" *ngFor=\"let pat of patients.nonmetastatic\" [ngValue]=\"pat\">{{pat.name}} ({{pat.subtype}})</option>\n                      </select>\n                    </p>\n                    <span *ngIf=\"selectedNonmetastaticPatient !== undefined\">\n                      <p>Cancer Subtype: <br/><b>{{selectedNonmetastaticPatient.subtype}}</b></p>\n                      <p>Metastasis free Survival: <b>{{selectedNonmetastaticPatient.mfsYears}} years</b></p>\n                    </span>\n                  </div>\n                </li>\n              </ul>\n            </div>\n          </li>\n\n<!--          Choose Threshold      -->\n          <li class=\"sidebar-dropdown\" [class.active]=\"activeMenuItem.threshold\">\n            <a href=\"#\" (click)=\"toggleMenu('threshold')\">\n              <i class=\"fas fa-sort-amount-up\"></i>\n              <span>Threshold</span>\n<!--              <span class=\"badge badge-pill badge-danger\">3</span>-->\n            </a>\n            <div class=\"sidebar-submenu\" [style.display]=\"activeMenuItem.threshold ? 'block':'none'\">\n              <ul *ngIf=\"thresholds !== undefined\">\n                <li [style.display]=\"(selectedMetastaticPatient !== undefined)&&(selectedNonmetastaticPatient === undefined) ? 'block':'none'\">\n                  <div class=\"input-group mb-3 custom-form-group\">\n                    <div class=\"input-group-prepend\">\n                      <span class=\"input-group-text\" id=\"basic-addon1\">Metastatic:</span>\n                    </div>\n                    <input type=\"text\" class=\"form-control\" id=\"metastatic-input\"\n                           value=\"{{thresholds.metastatic.selected / thresholds.multiplier}}\"\n                           aria-describedby=\"basic-addon3\" disabled>\n                  </div>\n                  <div class=\"form-group custom-form-group\">\n                    <input type=\"range\" class=\"custom-range\" id=\"customRange1\"\n                           min=\"{{thresholds.metastatic.threshold * thresholds.multiplier}}\"\n                           max=\"{{thresholds.metastatic.max * thresholds.multiplier}}\"\n                           [(ngModel)]=\"thresholds.metastatic.selected\"\n                           (change)=\"updateThreshold(thresholds)\">\n                    <div class=\"row justify-content-between\">\n                      <div class=\"col-4\">\n                        {{thresholds.metastatic.threshold}}\n                      </div>\n                      <div class=\"col-4 text-right\">\n                        {{thresholds.metastatic.max}}\n                      </div>\n                    </div>\n                  </div>\n                </li>\n                <li [style.display]=\"((selectedMetastaticPatient === undefined)&&(selectedNonmetastaticPatient !== undefined)) ? 'block':'none'\">\n                  <div class=\"input-group mb-3 custom-form-group\">\n                    <div class=\"input-group-prepend\">\n                      <span class=\"input-group-text\" id=\"basic-addon2\">Non-Metastatic:</span>\n                    </div>\n                    <input type=\"text\" class=\"form-control\" id=\"non-metastatic-input\"\n                           value=\"{{thresholds.nonmetastatic.selected / thresholds.multiplier}}\"\n                           aria-describedby=\"basic-addon3\" disabled>\n                  </div>\n                  <div class=\"form-group custom-form-group\">\n                    <input type=\"range\" class=\"custom-range\" id=\"customRange2\"\n                           min=\"{{thresholds.nonmetastatic.threshold * thresholds.multiplier}}\"\n                           max=\"{{thresholds.nonmetastatic.max * thresholds.multiplier}}\"\n                           [(ngModel)]=\"thresholds.nonmetastatic.selected\"\n                           (change)=\"updateThreshold(thresholds)\">\n                    <div class=\"row justify-content-between\">\n                      <div class=\"col-4\">\n                        {{thresholds.nonmetastatic.threshold}}\n                      </div>\n                      <div class=\"col-4 text-right\">\n                        {{thresholds.nonmetastatic.max}}\n                      </div>\n                    </div>\n                  </div>\n                </li>\n                <li [style.display]=\"((selectedMetastaticPatient !== undefined)&&(selectedNonmetastaticPatient !== undefined)) ? 'block':'none'\">\n                  <div class=\"input-group mb-3 custom-form-group\">\n                    <div class=\"input-group-prepend\">\n                      <span class=\"input-group-text\" id=\"basic-addon3\">Both Patients:</span>\n                    </div>\n                    <input type=\"text\" class=\"form-control\" id=\"both-patients-input\"\n                           value=\"{{thresholds.selected / thresholds.multiplier}}\"\n                           aria-describedby=\"basic-addon3\" disabled>\n                  </div>\n                  <div class=\"form-group custom-form-group\">\n                    <input type=\"range\" class=\"custom-range\" id=\"customRange3\"\n                           min=\"{{thresholds.minThreshold * thresholds.multiplier}}\"\n                           max=\"{{thresholds.maxThreshold * thresholds.multiplier}}\"\n                           [(ngModel)]=\"thresholds.selected\"\n                           (change)=\"updateThreshold(thresholds)\">\n                    <div class=\"row justify-content-between\">\n                      <div class=\"col-4\">\n                        {{thresholds.minThreshold}}\n                      </div>\n                      <div class=\"col-4 text-right\">\n                        {{thresholds.maxThreshold}}\n                      </div>\n                    </div>\n                  </div>\n                </li>\n                <li [style.display]=\"((selectedMetastaticPatient === undefined) && (selectedNonmetastaticPatient === undefined)) ? 'block':'none'\">\n                  <legend>Select some patients from the upper menu</legend>\n                </li>\n              </ul>\n            </div>\n          </li>\n          <!--      Choose a Node          -->\n          <li class=\"sidebar-dropdown\" [class.active]=\"activeMenuItem.nodes\">\n            <a href=\"#\" (click)=\"toggleMenu('nodes')\">\n              <i class=\"fas fa-project-diagram\"></i>\n              <span>Nodes</span>\n            </a>\n            <div class=\"sidebar-submenu\" [style.display]=\"activeMenuItem.nodes ? 'block':'none'\">\n              <div class=\"sidebar-search\">\n                <div>\n                  <div class=\"input-group\">\n                    <input type=\"text\" class=\"form-control search-menu\" placeholder=\"Search...\"\n                           [(ngModel)]=\"searchNode\"\n                           (input)=\"updateNetwork()\"\n                           autofocus>\n                    <!--                           autofocus>-->\n                    <div class=\"input-group-append\">\n                      <span class=\"input-group-text search-icon\">\n                        <i *ngIf=\"searchNode.length !== 0\" (click)=\"resetNodeSearch()\" class=\"far fa-times-circle\"></i>\n                        <i *ngIf=\"searchNode.length === 0\" class=\"fa fa-search\" aria-hidden=\"true\"></i>\n                      </span>\n                    </div>\n                    <button type=\"button\" class=\"btn btn-secondary\" disabled>{{nodes.length}}</button>\n                  </div>\n                </div>\n              </div>\n<!--              <ul class=\"list-group\">-->\n<!--                <li type=\"button\"-->\n<!--                    class=\"list-group-item list-group-item-dark\">Protein</li>-->\n<!--              </ul>-->\n<!--              <ul class=\"list-group\">-->\n<!--                <li type=\"button\"-->\n<!--                    class=\"list-group-item list-group-item-secondary\"-->\n<!--                    *ngFor=\"let node of nodes\"-->\n<!--                    (click)=\"highlightNode(node.id)\"-->\n<!--                [class.selected]=\"node.id === selectedNode\">{{node.id}} ({{nodeInfo[node.id].all}})</li>-->\n<!--              </ul>-->\n              <ul class=\"list-group\">\n              <table class=\"table table-hover table-dark\">\n                <thead>\n                <tr>\n                  <th scope=\"col\" class=\"w25\"\n                      (click)=\"updateNodeSort('name')\">Protein</th>\n                  <th scope=\"col\" class=\"w25\" *ngIf=\"selectedNonmetastaticPatient === undefined\"></th>\n                  <th scope=\"col\" class=\"w25\">\n                    <div *ngIf=\"selectedMetastaticPatient !== undefined\"\n                         (click)=\"updateNodeSort(selectedMetastaticPatient.subtype)\">\n                      {{selectedMetastaticPatient.subtype}} ({{subtypeCounts[selectedMetastaticPatient.subtype]}})\n                    </div>\n                  </th>\n                  <th scope=\"col\" class=\"w25\" *ngIf=\"selectedNonmetastaticPatient !== undefined\"\n                      (click)=\"updateNodeSort(selectedNonmetastaticPatient.subtype)\">\n                      {{selectedNonmetastaticPatient.subtype}} ({{subtypeCounts[selectedNonmetastaticPatient.subtype]}})\n                  </th>\n                  <th scope=\"col\" class=\"w25\"\n                      (click)=\"updateNodeSort('all')\">\n                    All ({{subtypeCounts !== undefined ? subtypeCounts[\"all\"] : \"\"}})\n                  </th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr *ngFor=\"let node of nodes\"\n                  (click)=\"highlightNode(node.id)\"\n                  [class.selected]=\"selectedNode.includes(node.id)\">\n                  <td class=\"w25\">{{node.id}}</td>\n                  <td class=\"w25\" *ngIf=\"selectedNonmetastaticPatient === undefined || selectedMetastaticPatient === selectedNonmetastaticPatient\"></td>\n                  <td class=\"w25\">{{selectedMetastaticPatient !== undefined ? nodeInfo[node.id][selectedMetastaticPatient.subtype] : \"\"}}</td>\n                  <td class=\"w25\" *ngIf=\"selectedNonmetastaticPatient !== undefined && selectedMetastaticPatient !== selectedNonmetastaticPatient\">{{nodeInfo[node.id][selectedNonmetastaticPatient.subtype]}}</td>\n                  <td class=\"w25\">{{nodeInfo[node.id].all}}</td>\n                </tr>\n                </tbody>\n              </table>\n              </ul>\n              <ul class=\"list-group\">\n                <button type=\"button\" class=\"btn btn-secondary\"\n                        (click)=\"highlightNode(undefined)\"\n                        [style.display]=\"selectedNode.length === 0 ? 'none':'block'\">unselect</button>\n              </ul>\n            </div>\n          </li>\n                <!--          Choose Layout      -->\n          <li class=\"sidebar-dropdown\" [class.active]=\"activeMenuItem.layout\">\n            <a href=\"#\" (click)=\"toggleMenu('layout')\">\n              <i class=\"fas fa-palette\"></i>\n              <span>Layout</span>\n            </a>\n            <div class=\"sidebar-submenu\" [style.display]=\"activeMenuItem.layout ? 'block':'none'\">\n              <ul>\n                <li class=\"form-group\" [style.display]=\"((selectedMetastaticPatient !== undefined) || (selectedNonmetastaticPatient !== undefined)) ? 'block':'none'\">\n                  <legend>Color Nodes</legend>\n                  <div *ngFor=\"let opt of objectKeys(layoutNodeColorOptions)\" class=\"custom-control custom-radio \"  >\n                    <input type=\"radio\" id=\"nodeColorBy{{opt}}\" name=\"customRadioNodeColor\" class=\"custom-control-input\"\n                           [(ngModel)]=\"layoutNodeColor\"\n                           [value]=\"opt\"\n                           (change)=\"updateNodeColor(layoutNodeColor)\"\n                           [checked]=\"layoutNodeColor===opt\">\n                    <label class=\"custom-control-label layout-list-label\" for=\"nodeColorBy{{opt}}\">\n                      <div>by {{layoutNodeColorOptions[opt]}}\n                        <strong *ngIf=\"opt==='geLevel' && layoutNodeColor === opt\">(\n                          <b style=\"background-color:#599eff;color:#383838;\">Low</b>,\n                          <b style=\"background-color:#e8e857;color:#383838;\">Normal</b>,\n                          <b style=\"background-color:#ff3d6a;color:#383838;\">High</b>)\n                        </strong>\n                        <div class=\"color-legend\" *ngIf=\"opt === 'ge' && layoutNodeColor === opt\" align=\"center\">\n                          <div class=\"from\">{{patients.geMin | number:'1.1-1'}}</div>\n                          <div class=\"mid-ge\"></div>\n                          <div class=\"to\">{{patients.geMax | number:'1.1-1'}}</div>\n                        </div>\n                        <div class=\"color-legend\" *ngIf=\"opt === 'rel' && layoutNodeColor === opt\" align=\"center\">\n                          <div class=\"from\">{{thresholds.minThreshold}}</div>\n                          <div class=\"mid-rel\"></div>\n                          <div class=\"to\">{{thresholds.maxThreshold}}</div>\n                        </div>\n                      </div>\n                    </label>\n                  </div>\n                </li>\n                <li class=\"form-group\" [style.display]=\"((selectedMetastaticPatient !== undefined) || (selectedNonmetastaticPatient !== undefined)) ? 'block':'none'\">\n                  <legend>Show All Nodes\n                    <label class=\"switch\" >\n                      <input type=\"checkbox\" class=\"primary\" [(ngModel)]=\"layoutAllNodes\" (change)=\"updateAllNodes(layoutAllNodes)\">\n                      <span class=\"slider round\"></span>\n                    </label>\n                  </legend>\n                  <legend>Show MTB results <div class=\"circle\"></div>\n                    <label class=\"switch\" >\n                      <input type=\"checkbox\" class=\"primary\" [(ngModel)]=\"layoutMtbNodes\" (change)=\"updateMtbNodes(layoutMtbNodes)\">\n                      <span class=\"slider round\"></span>\n                    </label>\n                  </legend>\n                  <legend [style.display]=\"((selectedMetastaticPatient !== undefined) && (selectedNonmetastaticPatient !== undefined)) ? 'block':'none'\">\n                    Show Only Shared Nodes\n                    <label class=\"switch\" >\n                      <input type=\"checkbox\" class=\"primary\" [(ngModel)]=\"layoutOnlyShared\" (change)=\"updateSharedNodes(layoutOnlyShared)\">\n                      <span class=\"slider round\"></span>\n                    </label>\n                  </legend>\n                </li>\n                <li class=\"form-group\" [style.display]=\"XOR((selectedMetastaticPatient !== undefined), (selectedNonmetastaticPatient !== undefined)) ? 'block':'none'\">\n                  <legend>Set Node Size</legend>\n                  <div *ngFor=\"let opt of objectKeys(layoutNodeSizeOptions)\" class=\"custom-control custom-radio custom-control-inline\"  >\n                    <input type=\"radio\" id=\"nodeSizeBy{{opt}}\" name=\"customRadioNodeSize\" class=\"custom-control-input\"\n                           [(ngModel)]=\"layoutNodeSize\"\n                           [value]=\"opt\"\n                           (change)=\"updateNodeSize(layoutNodeSize)\"\n                           [checked]=\"layoutNodeSize===opt\">\n                    <label class=\"custom-control-label\" for=\"nodeSizeBy{{opt}}\">by {{layoutNodeSizeOptions[opt]}}</label>\n                  </div>\n                </li>\n                <li class=\"row mb-3 custom-form-group\">\n                  <div class=\"col-12\">\n                    <button class=\"btn btn-block btn-secondary\" (click)=\"fitGraphToViewport()\">\n                      Fit Graph To Viewport\n                    </button>\n                  </div>\n                </li>\n                <li [style.display]=\"((selectedMetastaticPatient === undefined) && (selectedNonmetastaticPatient === undefined)) ? 'block':'none'\">\n                  <legend>Select some patients from the upper menu</legend>\n                </li>\n              </ul>\n            </div>\n          </li>\n<!--          Download Network as Image     -->\n          <li class=\"sidebar-dropdown\" [class.active]=\"activeMenuItem.download\">\n            <a href=\"#\" (click)=\"toggleMenu('download')\">\n              <i class=\"fas fa-arrow-circle-down\"></i>\n              <span>Download</span>\n            </a>\n            <div class=\"sidebar-submenu\" [style.display]=\"activeMenuItem.download ? 'block':'none'\">\n              <ul>\n                <li class=\"row mb-3 custom-form-group\">\n                    <div class=\"btn-group btn-group-toggle col-6\" data-toggle=\"buttons\">\n                      <label class=\"btn btn-secondary\" [class.active]=\"downloadFormat ==='png'\">\n                        <input type=\"radio\" name=\"options\" id=\"downloadFormat1\"\n                               [(ngModel)]=\"downloadFormat\"\n                               value=\"png\"\n                               [checked]=\"downloadFormat === 'png'\"> PNG\n                      </label>\n                      <label class=\"btn btn-secondary\" [class.active]=\"downloadFormat ==='jpg'\">\n                        <input type=\"radio\" name=\"options\" id=\"downloadFormat2\"\n                               [(ngModel)]=\"downloadFormat\"\n                               value=\"jpg\"\n                               [checked]=\"downloadFormat ==='jpg'\"> JPEG\n                      </label>\n                    </div>\n                    <div class=\"col-6 text-right\">\n                      <button class=\"btn btn-secondary btn-small\" (click)=\"downloadImage(downloadFormat)\">\n                        Download\n                      </button>\n                    </div>\n                </li>\n                <li>\n                  <div class=\"input-group mb-3 custom-form-group\">\n                    <div class=\"input-group-prepend\">\n                      <span class=\"input-group-text\" id=\"scaleImage\">Scale Image by </span>\n                    </div>\n                    <input type=\"text\" class=\"form-control\" id=\"scaleImage-input\"\n                           [(ngModel)]=\"downloadScaleImageBy\"\n                           aria-describedby=\"scaleImage\">\n                  </div>\n                </li>\n                <li class=\"form-group\" [style.display]=\"downloadFormat !== 'jpg' ? 'block':'none'\">\n                  <legend>Transparent Background\n                    <label class=\"switch\" >\n                      <input type=\"checkbox\" class=\"primary\" [(ngModel)]=\"downloadTransparent\" >\n                      <span class=\"slider round\"></span>\n                    </label>\n                  </legend>\n                </li>\n              </ul>\n            </div>\n          </li>\n\n        </ul>\n      </div>\n      <!-- sidebar-menu  -->\n      <div class=\"sidebar-menu\" [style.display]=\"activeMenuItem.impressum ? 'block':'none'\">\n        <h3><a href=\"http://mypathsem.bioinf.med.uni-goettingen.de/\">MyPathSem Project</a></h3>\n        <h3><a href=\"http://mypathsem.bioinf.med.uni-goettingen.de/impressum\">Impressum</a></h3>\n        <h3><a href=\"http://mypathsem.bioinf.med.uni-goettingen.de/datenschutz\">Datenschutz</a></h3>\n      </div>\n    </div>\n    <!-- sidebar-content  -->\n        <div class=\"sidebar-footer\">\n          <a href=\"#\" (click)=\"toggleMenu('impressum')\">\n           Impressum\n          </a>\n        </div>\n  </nav>\n\n  <!-- sidebar-wrapper  -->\n  <main class=\"page-content\">\n    <div #page class=\"container-fluid\" style=\"height: 100%;\">\n      <div #heading class=\"row\">\n        <h2>{{title}}</h2>\n      <hr>\n      </div>\n      <div #cy class=\"row\" [ngStyle]=\"{'height.px': page.offsetHeight - heading.offsetHeight -50}\" ></div>\n    </div>\n\n  </main>\n  <!-- page-content\" -->\n</div>\n<!-- page-wrapper -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\"\n        crossorigin=\"anonymous\"></script>\n<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\"\n        crossorigin=\"anonymous\"></script>\n\n</body>\n\n</html>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppComponent } from './app.component';\nimport {FormsModule} from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {ElementRef, Injectable, ViewChild} from '@angular/core';\nimport {DataLoaderService} from './data-loader.service';\nimport {Network} from './network';\nimport cytoscape from 'cytoscape';\nimport {Patient} from './patient';\nimport {ThresholdResponse} from './threshold-response';\nimport {Threshold} from './threshold';\nimport {min} from 'rxjs/operators';\nimport {AppComponent} from './app.component';\nimport {Edge} from './edge';\nimport {style} from '@angular/animations';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CyGraphService {\n  private colors = {\n    red: '#ff3d6a',\n    yellow: '#e8e857',\n    // yellow: '#d6d656',\n    blue: '#599eff',\n    green: '#0b0',\n    gray: '#888',\n    highlight: '#333'\n  }\n\n  // private appComponent: AppComponent;\n  private cy: any;\n  private metPat: Patient;\n  private nonPat: Patient;\n  private showAllNodes = false;\n  private showOnlySharedNodes = false;\n  private showMtbNodes: boolean;\n  private sizeBy: string;\n  private colorBy: string;\n  private thresholds: ThresholdResponse;\n  private geMin: number;\n  private geMax: number;\n  private highlightedNode: string;\n\n  constructor(private dataLoader: DataLoaderService) { }\n\n\n  initGraph(cyDiv: ElementRef, network: Network, sizeBy: string, colorBy: string) {\n    this.sizeBy = sizeBy;\n    this.colorBy = colorBy;\n    // console.log(\"In the init of cyService\");\n    this.dataLoader.getNetwork().subscribe((network) => {\n      // console.log(\"init cytoscape\");\n      const layer = {};\n      const numberOfLayers = 11;\n      network.nodes.forEach((node, i) => {\n        if(i < 1) {\n          layer[node.data.id] = numberOfLayers;     //1\n        } else if (i < 5) {                          //5=4+1\n          layer[node.data.id] = numberOfLayers - 1;  //4\n        } else if (i < 17) {                         //17=12+5\n          layer[node.data.id] = numberOfLayers - 2;  //12=4*3\n        } else if (i < 37) {                         //53=36+17\n          layer[node.data.id] = numberOfLayers - 3;  //36=12*3\n        } else if (i < 61) {                        //161=108+53\n          layer[node.data.id] = numberOfLayers - 4;  //108=36*3\n        } else if (i < 93) {\n          layer[node.data.id] = numberOfLayers - 5;\n        } else if (i < 133) {\n          layer[node.data.id] = numberOfLayers - 6;\n        } else if (i < 173) {\n          layer[node.data.id] = numberOfLayers - 7;\n        } else if (i < 225) {\n          layer[node.data.id] = numberOfLayers - 8;\n        } else if (i < 285) {\n          layer[node.data.id] = numberOfLayers - 9;\n        } else if (i < 335) {\n          layer[node.data.id] = numberOfLayers - 10;\n        } else {\n          layer[node.data.id] = numberOfLayers - 11;\n        }\n      });\n\n\n      // console.log('Layer: ' + network.nodes[1].layer);\n\n      this.cy = cytoscape({\n              container: cyDiv.nativeElement, // container to render in\n\n              elements: network,\n\n              style: [ // the stylesheet for the graph\n                {\n                  selector: 'node',\n                  style: {\n                    label: 'data(id)',\n                    'text-valign': 'center',\n                    'background-color': this.colors.gray,\n                    color: '#fff',\n                    // color: '#242424',\n                    'text-outline-color': this.colors.gray,\n                    'text-outline-width': '5px',\n                    width: '50px', height: '50px'\n                  }\n                },\n                {\n                  selector: 'node[color], node[colorMet], node[colorNonMet]',\n                  style: {\n                      color: '#383838',\n                      'font-weight': 'bold',\n                  }\n                },\n                {\n                  selector: 'node[!shown]',\n                  style: {\n                    visibility: 'hidden'\n                  }\n                },\n\n                {\n                  selector: 'node.mtb',\n                  style: {\n                    'border-width': '15px',\n                    'border-color': this.colors.green\n                  }\n                },\n                {\n                  selector: 'node.split',\n                  style: {\n                    'text-outline-width': '0px',\n                    'text-outline-color': this.colors.gray,\n                    'text-outline-opacity': '0.3',\n                    width: '80px', height: '80px',\n                    'pie-size': '100%',\n                    'pie-1-background-color': 'green',\n                    'pie-1-background-size': '50%',\n                    'pie-2-background-color': 'green',\n                    'pie-2-background-size': '50%'\n                  }\n                },\n                {\n                  selector: 'node.splitLeft',\n                  style: {\n                    'text-outline-width': '0px',\n                    'text-outline-color': this.colors.gray,\n                    'text-outline-opacity': '0.3',\n                    width: '80px', height: '80px',\n                    'pie-size': '100%',\n                    'pie-1-background-color': 'green',\n                    'pie-1-background-size': '50%',\n                    'pie-2-background-color': 'green',\n                    'pie-2-background-size': '50%'\n                  }\n                },\n\n                {\n                  selector: 'node.highlight',\n                  style: {\n                    'border-width': '13px',\n                    'border-color': this.colors.highlight,\n                  }\n                },\n                {\n                  selector: 'edge[!shown]',\n                  style: {\n                    visibility: 'hidden'\n                  }\n                },\n\n                {\n                  selector: 'edge',\n                  style: {\n                    width: 3,\n                    'line-color': '#ccc',\n                    'target-arrow-color': '#ccc',\n                    'target-arrow-shape': 'triangle'\n                  }\n                },\n\n                {\n                  selector: 'edge.highlight',\n                  style: {\n                    width: 3,\n                    'line-color': this.colors.highlight,\n                  }\n                }\n\n              ],\n              layout: {\n                name: 'concentric',\n                levelWidth( nodes ) { // the letiation of concentric values in each level\n                  return 1;\n                },\n                concentric( node ) { // returns numeric value for each node, placing higher nodes in levels towards the centre\n                  // console.log('Node: ' + node.data('id') + ' Layer: ' + layer[node.data('id')]);\n                  return layer[node.data('id')];\n                },\n                spacingFactor: 1.65\n              }\n              // layout: {\n              //   name: 'grid',\n              // }\n            })\n      this.cy.elements('node,edge')\n        .data('shown', true);\n    });\n  }\n\n\n  setGeRange(geMin: number, geMax: number) {\n    this.geMin = geMin;\n    this.geMax = geMax;\n    // console.log('ge range: '+this.geMin+'-'+this.geMax);\n  }\n\n  setMetastaticPatient(metPat: Patient) {\n    this.metPat = metPat;\n    this.layoutPatient();\n  }\n\n  setNonMetastaticPatient(nonPat: Patient) {\n    this.nonPat = nonPat;\n    this.layoutPatient();\n  }\n\n  setShowAllNodes(shown: boolean) {\n    this.showAllNodes = shown;\n    this.updataShownNodes();\n  }\n\n  setShowOnlySharedNodes(shown: boolean) {\n    this.showOnlySharedNodes = shown;\n    this.updataShownNodes();\n  }\n\n  setShowMtbNodes(shown: boolean) {\n    this.showMtbNodes = shown;\n    this.updateMtbNodes();\n  }\n\n  setSizeBy(by: string) {\n    this.sizeBy = by;\n    this.layoutPatient();\n  }\n\n  setColorBy(by: string) {\n    this.colorBy = by;\n    this.layoutPatient();\n  }\n\n  getNetwork() {\n    const nodes = [];\n    this.cy.elements('node[?shown]').forEach((node) => {\n      // console.log('Get Network from CS: ' + Object.keys(node.data()) + Object.values(node.data()));\n      nodes.push({id: node.id(), connected: node.connectedEdges()});\n    });\n    return nodes;\n  }\n\n  private updataShownNodes() {\n    this.cy.batch(() => {\n      this.cy.elements('node[member]')\n        .data('shown', true);\n      this.cy.elements('node[!member]')\n        .data('shown', this.showAllNodes);\n      this.cy.elements('node[member]')\n        .connectedEdges()\n        .data('shown', true);\n      this.cy.elements('node[!member]')\n        .connectedEdges()\n        .data('shown', this.showAllNodes);\n      this.cy.elements('node.split[colorMet][^colorNonMet]')\n        .data('shown', !this.showOnlySharedNodes);\n      this.cy.elements('node.split[^colorMet][colorNonMet]')\n        .data('shown', !this.showOnlySharedNodes);\n      this.cy.elements('node.split[colorMet][^colorNonMet], node.split[^colorMet][colorNonMet]')\n        .connectedEdges('edge[?shown]')\n        .data('shown', !this.showOnlySharedNodes);\n    });\n  }\n\n  private clear() {\n    this.cy.batch(() => {\n      this.cy.elements('node')\n        .removeData('member')\n        .removeData('color')\n        .removeData('colorMet')\n        .removeData('colorNonMet')\n        .removeData('size')\n        .removeClass('mtb')\n        .removeClass('split');\n      this.removeSizeMap();\n      // this.updataShownNodes();\n    });\n  }\n\n  private setSizeMap(minValue, maxValue) {\n    const sizeMap = 'mapData(size, ' + minValue + ', ' + maxValue + ', 50, 130)';\n    const fontSizeMap = 'mapData(size, ' + minValue + ', ' + maxValue + ', 18, 30)';\n    this.cy.style()\n      .selector('node[?member]')\n      .style('width', sizeMap)\n      .style('height', sizeMap)\n      .style('font-size', fontSizeMap);\n  }\n\n  private removeSizeMap() {\n    this.cy.style()\n      .selector('node[?member]')\n      // .style('background-color', this.colors.gray)\n      // .style('text-outline-color', this.colors.gray)\n      .style('width', '50px')\n      .style('height', '50px')\n      .style('font-size', '18px');\n  }\n\n  private setColorMap(minValue, maxValue) {\n    const midPoint = maxValue - ((maxValue - minValue) / 2);\n    const colorMap1 = 'mapData(color, ' + minValue + ', ' + maxValue + ', ' + this.colors.blue + ', ' + this.colors.yellow + ')';\n    const colorMap2 = 'mapData(color, ' + minValue + ', ' + maxValue + ', ' + this.colors.yellow + ', ' + this.colors.red + ')';\n    this.cy.style()\n      .selector('node[color<=' + midPoint + ']')\n      .style('background-color', colorMap1)\n      .style('text-outline-color', colorMap1)\n      .selector('node[color>' + midPoint + ']')\n      .style('background-color', colorMap2)\n      .style('text-outline-color', colorMap2);\n  }\n\n  private setSplitColorMap(minValueMet, maxValueMet, minValueNonMet, maxValueNonMet) {\n    const midPointMet = maxValueMet - ((maxValueMet - minValueMet) / 2);\n    const midPointNonMet = maxValueNonMet - ((maxValueNonMet - minValueNonMet) / 2);\n    const colorMapMet1 = 'mapData(colorMet, ' + minValueMet + ', ' + maxValueMet + ', ' + this.colors.blue + ', ' + this.colors.yellow + ')';\n    const colorMapMet2 = 'mapData(colorMet, ' + minValueMet + ', ' + maxValueMet + ', ' + this.colors.yellow + ', ' + this.colors.red + ')';\n    const colorMapNonMet1 = 'mapData(colorNonMet, ' + minValueNonMet + ', ' + maxValueNonMet + ', ' + this.colors.blue + ', ' + this.colors.yellow + ')';\n    const colorMapNonMet2 = 'mapData(colorNonMet, ' + minValueNonMet + ', ' + maxValueNonMet + ', ' + this.colors.yellow + ', ' + this.colors.red + ')';\n    this.cy.style()\n      .selector('node.split[colorMet][colorNonMet]')\n      .style('width', '80px')\n      .style('height', '80px')\n      .selector('node.split[colorMet<=' + midPointMet + ']')\n      .style('pie-2-background-color', colorMapMet1)\n      .selector('node.split[colorMet>' + midPointMet + ']')\n      .style('pie-2-background-color', colorMapMet2)\n      .selector('node.split[colorNonMet<=' + midPointNonMet + ']')\n      .style('pie-1-background-color', colorMapNonMet1)\n      .selector('node.split[colorNonMet>' + midPointNonMet + ']')\n      .style('pie-1-background-color', colorMapNonMet2)\n      .selector('node.split[colorMet][^colorNonMet]')\n      .style('pie-1-background-color', this.colors.gray)\n      .selector('node.split[^colorMet][colorNonMet]')\n      .style('pie-2-background-color', this.colors.gray);\n  }\n\n  private setColorDisc() {\n    this.cy.style()\n      .selector('node[color]')\n      // .style('color', '#242424')\n      .style('font-weight', 'bold')\n      .selector('node[color = \\'LOW\\']')\n      .style('background-color', this.colors.blue)\n      .style('text-outline-color', this.colors.blue)\n      .selector('node[color = \\'NORMAL\\']')\n      .style('background-color', this.colors.yellow)\n      .style('text-outline-color', this.colors.yellow)\n      .selector('node[color = \\'HIGH\\']')\n      .style('background-color', this.colors.red)\n      .style('text-outline-color', this.colors.red)\n      .selector('node.split[colorMet][colorNonMet]')\n      .style('width', '80px')\n      .style('height', '80px')\n      .selector('node.split[^colorMet], node.split[^colorNonMet]')\n      .style('pie-2-background-color', this.colors.gray)\n      .style('pie-1-background-color', this.colors.gray)\n      .selector('node.split[colorMet = \\'LOW\\']')\n      .style('pie-2-background-color', this.colors.blue)\n      .selector('node.split[colorNonMet = \\'LOW\\']')\n      .style('pie-1-background-color', this.colors.blue)\n      .selector('node.split[colorMet = \\'NORMAL\\']')\n      .style('pie-2-background-color', this.colors.yellow)\n      .selector('node.split[colorNonMet = \\'NORMAL\\']')\n      .style('pie-1-background-color', this.colors.yellow)\n      .selector('node.split[colorMet = \\'HIGH\\']')\n      .style('pie-2-background-color', this.colors.red)\n      .selector('node.split[colorNonMet = \\'HIGH\\']')\n      .style('pie-1-background-color', this.colors.red);\n  }\n\n  updateMtbNodes() {\n    if (this.showMtbNodes) {\n      this.cy.style()\n        .selector('node.mtb')\n        .style('border-width', '7px');\n    } else {\n      this.cy.style()\n        .selector('node.mtb')\n        .style('border-width', '0px');\n    }\n    this.layoutPatient();\n  }\n\n  private visualizeOne(pat: Patient, threshold: Threshold) {\n    // console.log('Layout Patient: ' + pat.name);\n    this.cy.batch(() => {\n      this.clear();\n\n      let size: string;\n      if (this.sizeBy === 'rel') {\n        size = 'score';\n        this.setSizeMap(threshold.threshold, threshold.max);\n        // this.setSizeMap(pat.getMinScore(), pat.getMaxScore());\n      } else if (this.sizeBy === 'ge') {\n        size = 'ge';\n        this.setSizeMap(pat.getMinGe(), pat.getMaxGe());\n      }\n\n      let color: string;\n      if (this.colorBy === 'rel') {\n        color = 'score';\n        this.setColorMap(threshold.threshold, threshold.max);\n        // this.setColorMap(pat.getMinScore(), pat.getMaxScore());\n      } else if (this.colorBy === 'ge') {\n        color = 'ge';\n        this.setColorMap(this.geMin, this.geMax);\n      } else if (this.colorBy === 'geLevel') {\n        color = 'geLevel';\n        this.setColorDisc();\n      }\n\n      for (const data of pat.patientData) {\n        // console.log(\"Score: \" + data.score + \" Threshold: \" + (threshold.selected / this.thresholds.multiplier) + \" IF: \" + (data.score >= (threshold.selected / this.thresholds.multiplier)));\n        if (data.score >= (threshold.selected / this.thresholds.multiplier)) {\n          // console.log('size: ' + size);\n          // console.log('Patient Data: ' + data);\n          const node = this.cy.getElementById(data.name)\n            .data('member', true)\n            .data('shown', true)\n            .data('size', data[size])\n            .data('color', data[color]);\n          if (data.mtb) {\n            node.addClass('mtb');\n          }\n        }\n      }\n\n      this.updataShownNodes();\n    });\n  }\n\n  private visualizeTwo() {\n    // console.log('Layout Two Patients: ' + this.metPat.name + ' and ' + this.nonPat.name);\n    this.cy.batch(() => {\n      this.clear();\n\n      let color: string;\n      if (this.colorBy === 'rel') {\n        color = 'score';\n        const minValue = Math.min(this.thresholds.metastatic.threshold, this.thresholds.nonmetastatic.threshold);\n        const maxValue = Math.max(this.thresholds.metastatic.max, this.thresholds.nonmetastatic.max);\n        this.setColorMap(minValue, maxValue);\n        this.setSplitColorMap(\n          this.thresholds.metastatic.threshold, this.thresholds.metastatic.max,\n          this.thresholds.nonmetastatic.threshold, this.thresholds.nonmetastatic.max\n        );\n      } else if (this.colorBy === 'ge') {\n        color = 'ge';\n        // const minValue = Math.min(this.metPat.getMinGe(), this.nonPat.getMinGe());\n        // const maxValue = Math.min(this.metPat.getMaxGe(), this.nonPat.getMaxGe());\n        // this.setColorMap(minValue, maxValue);\n        // this.setSplitColorMap(\n        //   this.metPat.getMinGe(), this.metPat.getMaxGe(),\n        //   this.nonPat.getMinGe(), this.nonPat.getMaxGe()\n        // );\n        this.setSplitColorMap(\n          this.geMin, this.geMax,\n          this.geMin, this.geMax\n        );\n      } else if (this.colorBy === 'geLevel') {\n        color = 'geLevel';\n        this.setColorDisc();\n      }\n\n      for (const data of this.metPat.patientData) {\n        if (data.score >= (this.thresholds.selected / this.thresholds.multiplier)) {\n          const node = this.cy.getElementById(data.name)\n            .data('member', true)\n            .data('shown', true)\n            .addClass('split')\n            .data('colorMet', data[color]);\n          if (data.mtb) {\n            node.addClass('mtb');\n          }\n        }\n      }\n      for (const data of this.nonPat.patientData) {\n        if (data.score >= (this.thresholds.selected / this.thresholds.multiplier)) {\n          const node = this.cy.getElementById(data.name)\n            .data('member', true)\n            .data('shown', true)\n            .addClass('split')\n            .data('colorNonMet', data[color]);\n          if (data.mtb) {\n            node.addClass('mtb');\n          }\n        }\n      }\n\n      this.updataShownNodes();\n    });\n  }\n\n\n  private visualizeTwo_old() {\n    // console.log('Layout Two Patients: ' + this.metPat.name + ' and ' + this.nonPat.name);\n    this.cy.batch(() => {\n      this.clear();\n\n      let color: string;\n      if (this.colorBy === 'rel') {\n        color = 'score';\n        const minValue = Math.min(this.thresholds.metastatic.threshold, this.thresholds.nonmetastatic.threshold);\n        const maxValue = Math.max(this.thresholds.metastatic.max, this.thresholds.nonmetastatic.max);\n        this.setColorMap(minValue, maxValue);\n        this.setSplitColorMap(\n          this.thresholds.metastatic.threshold, this.thresholds.metastatic.max,\n          this.thresholds.nonmetastatic.threshold, this.thresholds.nonmetastatic.max\n        );\n      } else if (this.colorBy === 'ge') {\n        color = 'ge';\n        const minValue = Math.min(this.metPat.getMinGe(), this.nonPat.getMinGe());\n        const maxValue = Math.min(this.metPat.getMaxGe(), this.nonPat.getMaxGe());\n        this.setColorMap(minValue, maxValue);\n        this.setSplitColorMap(\n          this.metPat.getMinGe(), this.metPat.getMaxGe(),\n          this.nonPat.getMinGe(), this.nonPat.getMaxGe()\n        );\n      } else if (this.colorBy === 'geLevel') {\n        color = 'geLevel';\n        this.setColorDisc();\n      }\n\n      const combinedPats = {};\n      for (const pat of this.metPat.patientData) {\n        combinedPats[pat.name] = [pat];\n      }\n      for (const pat of this.nonPat.patientData) {\n        if (Object.keys(combinedPats).indexOf(pat.name) > -1) {\n          combinedPats[pat.name].push(pat);\n        } else {\n          combinedPats[pat.name] = [pat];\n        }\n      }\n\n      for (const nodeId of Object.keys(combinedPats)) {\n        // console.log(\"Score: \" + data.score + \" Threshold: \" + (threshold.selected / this.thresholds.multiplier) + \" IF: \" + (data.score >= (threshold.selected / this.thresholds.multiplier)));\n        let data = combinedPats[nodeId];\n        // console.log(\"Node: \" + nodeId + \" Data: \" + data + \" Length: \" + data.length);\n        if (data.length === 2) {\n          // console.log(\"Min Score: \" + Math.max(data[0].score, data[1].score) + \" Threshold: \" + (this.thresholds.selected / this.thresholds.multiplier));\n          if (Math.max(data[0].score, data[1].score) >= (this.thresholds.selected / this.thresholds.multiplier)) {\n            // console.log('Patient Data: ' + data);\n            const node = this.cy.getElementById(nodeId)\n              .data('member', true)\n              .data('shown', true)\n              .addClass('split')\n              .data('colorMet', data[0][color])\n              .data('colorNonMet', data[1][color]);\n            if (data.mtb) {\n              node.addClass('mtb');\n            }\n          }\n        } else {\n          data = data[0];\n          if (data.score >= (this.thresholds.selected / this.thresholds.multiplier)) {\n            // console.log('Patient Data: ' + data);\n            const node = this.cy.getElementById(data.name)\n              .data('member', true)\n              .data('shown', true)\n              .data('color', data[color]);\n            if (data.mtb) {\n              node.addClass('mtb');\n            }\n          }\n        }\n      }\n\n      this.updataShownNodes();\n    });\n  }\n\n  layoutPatient() {\n    // console.log('Met Patient defined: ' + (this.metPat !== undefined));\n    // console.log('Non Patient defined: ' + (this.nonPat !== undefined));\n    if ((this.metPat !== undefined) && (this.nonPat !== undefined)) {\n      // console.log('Layout two patients!');\n      this.clear();\n      this.visualizeTwo();\n    } else if (this.metPat !== undefined) {\n      // console.log('Layout metPat!');\n      this.visualizeOne(this.metPat, this.thresholds.metastatic);\n    } else if (this.nonPat !== undefined) {\n      // console.log('Layout nonPat!');\n      this.visualizeOne(this.nonPat, this.thresholds.nonmetastatic);\n    } else {\n      // console.log('Nothing to layout!');\n      this.clear();\n      this.cy.elements('node')\n        .data('shown', true);\n      // this.updataShownNodes();\n    }\n  }\n\n  setThreshold(thresholds: ThresholdResponse) {\n    this.thresholds = thresholds;\n  }\n\n  updateThreshold(thresholds: ThresholdResponse) {\n    this.thresholds = thresholds;\n    this.layoutPatient();\n  }\n\n  getImage(type: string, transparent: boolean, scaleBy: number) {\n    let image;\n    const bgColor = transparent ? 'transparent' : 'white';\n    if (type === 'png') {\n      image = this.cy.png({bg: bgColor, scale: scaleBy});\n    } else {\n      image = this.cy.jpg({scale: scaleBy});\n    }\n    return image;\n  }\n\n  highlightNode(nodes: string[]) {\n    this.cy.elements('node')\n      .removeClass('highlight');\n    this.cy.elements('edge')\n      .removeClass('highlight');\n    if (nodes !== undefined) {\n      nodes.forEach((node) => {\n        this.cy.getElementById(node)\n          .addClass('highlight')\n          .connectedEdges()\n          .addClass('highlight');\n      });\n    }\n  }\n\n  fitGraphToViewport() {\n    this.cy.fit(this.cy.elements('node[?shown]'));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {PatientsResponse} from './patients-response';\nimport {PatientData} from './patient-data';\nimport {Network} from './network';\nimport {Observable} from 'rxjs';\nimport {ThresholdResponse} from './threshold-response';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataLoaderService {\n\n  private patientsUrl = 'assets/data/patients.json';\n  private patientDataUrl = 'assets/data/patient/';\n  private thresholdUrl = 'assets/data/thresholds.json';\n  private networkUrl = 'assets/data/network.json';\n\n  constructor(private httpClient: HttpClient) {}\n\n  getPatients(): Observable<PatientsResponse> {\n    return this.httpClient.get<PatientsResponse>(this.patientsUrl);\n  }\n\n  getPatientData(patientId: string): Observable<PatientData[]> {\n    // console.log('Called get patient data: ' + this.patientDataUrl + patientId + '.json');\n    return this.httpClient.get<PatientData[]>(this.patientDataUrl + patientId + '.json');\n  }\n\n  getThresholds() {\n    return this.httpClient.get<ThresholdResponse>(this.thresholdUrl);\n  }\n  // getThresholds(): Observable<ThresholdResponse> {\n  //   return this.httpClient.get<ThresholdResponse>(this.thresholdUrl);\n  // }\n\n  getNetwork(): Observable<Network> {\n    // console.log('Get network: ' + this.networkUrl);\n    return this.httpClient.get<Network>(this.networkUrl);\n  }\n\n\n}\n","import {PatientData} from './patient-data';\nimport {DataLoaderService} from './data-loader.service';\n\nexport class Patient {\n  private dataLoader?: DataLoaderService;\n  public name: string;\n  public mfsYears: number;\n  public subtype: string;\n  public patientData?: PatientData[];\n  private minScore?: number;\n  private maxScore?: number;\n  private minGe?: number;\n  private maxGe?: number;\n\n  constructor(data: any, dataLoader: DataLoaderService) {\n    this.name = data.name;\n    this.mfsYears = data.mfsYears;\n    this.subtype = data.subtype;\n    this.dataLoader = dataLoader;\n    this.loadPatientData();\n  }\n\n  getMinScore() {\n    if (this.minScore === undefined) {\n      this.minScore = this.patientData.reduce((previousValue, currentValue) => {\n        return (previousValue.score < currentValue.score ? previousValue : currentValue);\n      }).score;\n    }\n    return this.minScore;\n  }\n\n  getMaxScore() {\n    if (this.maxScore === undefined) {\n      this.maxScore = this.patientData.reduce((previousValue, currentValue) => {\n        return (previousValue.score > currentValue.score ? previousValue : currentValue);\n      }).score;\n    }\n    return this.maxScore;\n  }\n\n  getMinGe() {\n    if (this.minGe === undefined) {\n      this.minGe = this.patientData.reduce((previousValue, currentValue) => {\n        return (previousValue.ge < currentValue.ge ? previousValue : currentValue);\n      }).ge;\n    }\n    return this.minGe;\n  }\n\n  getMaxGe() {\n    if (this.maxGe === undefined) {\n      this.maxGe = this.patientData.reduce((previousValue, currentValue) => {\n        return (previousValue.ge > currentValue.ge ? previousValue : currentValue);\n      }).ge;\n    }\n    return this.maxGe;\n  }\n\n\n  private loadPatientData(): void {\n    this.dataLoader.getPatientData(this.name).subscribe((data) => {\n      this.patientData = data;\n      // console.log('Patient ' + this.name + ': ' + this.patientData.length);\n    });\n  }\n}\n","import {Patient} from './patient';\nimport {ClassResponse} from './class-response';\nimport {DataLoaderService} from './data-loader.service';\n\nexport class PatientsResponse implements ClassResponse{\n\n  metastatic: Patient[];\n  nonmetastatic: Patient[];\n  geMin: number;\n  geMax: number;\n\n  constructor(data: any, dataLoader: DataLoaderService) {\n    this.geMin = data.geMin;\n    this.geMax = data.geMax;\n    // console.log('ge range init: '+this.geMin+'-'+this.geMax);\n    this.metastatic = data.metastatic.map(pat => new Patient(pat, dataLoader));\n    this.nonmetastatic = data.nonmetastatic.map(pat => new Patient(pat, dataLoader));\n  }\n}\n","import {Threshold} from './threshold';\nimport {ClassResponse} from './class-response';\n\nexport class ThresholdResponse implements ClassResponse {\n  // constructor(public metastatic: Threshold,\n  //             public nonmetastatic: Threshold,\n  //             public multiplier: number = 1000000000) {}\n\n  // public static multiplier = 1000000000;\n  public multiplier: number = 1000000000;\n  public metastatic: Threshold;\n  public nonmetastatic: Threshold;\n  public minThreshold: number;\n  public maxThreshold: number;\n  public selected: number;\n\n  constructor(data:any){\n    this.multiplier = 1000000000;\n    this.metastatic = new Threshold(data.metastatic, this.multiplier);\n    this.nonmetastatic = new Threshold(data.nonmetastatic, this.multiplier);\n    this.minThreshold = Math.min(this.metastatic.threshold, this.nonmetastatic.threshold);\n    this.maxThreshold = Math.max(this.metastatic.max, this.nonmetastatic.max);\n    this.selected = this.minThreshold * this.multiplier;\n  }\n\n  // constructor(data: any) {\n  //   Object.assign(this, data);\n  // }\n  //\n  // public static init(obj: ThresholdResponse){\n  //   obj.multiplier = 1000000000;\n  // }\n\n}\n","export class Threshold {\n\n  public selected: number;\n  public threshold: number;\n  public max: number;\n\n  constructor(data: any, multiplier: number) {\n    this.threshold = data.threshold;\n    this.max = data.max;\n    this.selected = data.threshold * multiplier;\n  }\n\n  // constructor(public threshold: number,\n  //             public max: number) { }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}