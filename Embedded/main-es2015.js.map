{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/cy-graph.service.ts","./src/app/data-loader.service.ts","./src/app/patient.ts","./src/app/patients-response.ts","./src/app/threshold-response.ts","./src/app/threshold.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import {Component, OnChanges, OnInit, AfterViewInit, ViewChild, ElementRef} from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport {PatientsResponse} from './patients-response';\nimport {DataLoaderService} from './data-loader.service';\nimport {Patient} from './patient';\nimport {CyGraphService} from './cy-graph.service';\nimport {ThresholdResponse} from './threshold-response';\nimport { saveAs} from 'file-saver';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent  implements AfterViewInit, OnChanges, OnInit {\n  public title = 'Patient Specific Molecular Sub-Networks Responsible for Metastasis in Breast Cancer';\n\n  sideBarShown = true;\n  activeMenuItem = {\n    nodes: false,\n    patient: true,\n    threshold: false,\n    layout: true,\n    download: false,\n    impressum: false\n  };\n  private cy;\n\n  @ViewChild('cy') cyDiv: ElementRef;\n\n  objectKeys = Object.keys;\n  thresholds: ThresholdResponse;\n\n  patients: PatientsResponse = {metastatic: [],\n                                nonmetastatic: [],\n                                geMin: 0,\n                                geMax: 15};\n\n  selectedMetastaticPatient: Patient;\n\n  selectedNonmetastaticPatient: Patient;\n  layoutNodeSize = 'rel';\n\n  layoutNodeColor = 'geLevel';\n  layoutNodeSizeOptions = {\n    rel: 'Relevance',\n    ge: 'Gene Expression'\n  };\n  layoutNodeColorOptions = {\n    geLevel: 'Gene Expression Level ',\n    ge: 'Gene Expression',\n    rel: 'Relevance'\n  };\n  layoutAllNodes = false;\n  layoutMtbNodes = true;\n\n  downloadFormat = 'png';\n  downloadTransparent = false;\n  downloadScaleImageBy = 1.0;\n  nodes = [];\n  searchNode = '';\n  selectedNode = [];\n  layoutOnlyShared = false;\n  nodeInfo: object;\n  subtypeCounts: object;\n  private nodeSort = 'name';\n\n  constructor(private httpClient: HttpClient,\n              private dataLoader: DataLoaderService,\n              private cyGraph: CyGraphService) {}\n\n  XOR(a: boolean, b: boolean) { return ( a || b ) && !( a && b ); }\n\n  ngOnChanges() {\n  }\n\n\n  ngOnInit() {\n    this.dataLoader.getThresholds().subscribe(data => {\n      this.thresholds = new ThresholdResponse(data);\n      this.cyGraph.setThreshold(this.thresholds);\n      // console.log('Multiplier1: ' + this.thresholds.multiplier);\n    });\n\n    this.dataLoader.getPatients().subscribe((data: PatientsResponse) => {\n      // console.log('Loaded patients:');\n      // console.log(data);\n      this.patients = new PatientsResponse(data, this.dataLoader);\n      this.cyGraph.setGeRange(this.patients.geMin, this.patients.geMax);\n    });\n  }\n\n  ngAfterViewInit() {\n    // console.log(\"Init Graph: \" + this.layoutNodeSize);\n    this.dataLoader.getNetwork().subscribe((network) => {\n      this.subtypeCounts = network.occ;\n      this.nodeInfo = {};\n      network.nodes.forEach((node) => {\n        this.nodeInfo[node.data.id] = node.occ;\n      });\n      this.cyGraph.initGraph(this.cyDiv, network, this.layoutNodeSize, this.layoutNodeColor);\n    });\n  }\n\n\n  setMetastaticPatient(pat: Patient) {\n    this.cyGraph.setMetastaticPatient(pat);\n    this.updateNetwork();\n  }\n  setNonMetastaticPatient(pat: Patient) {\n    this.cyGraph.setNonMetastaticPatient(pat);\n    this.updateNetwork();\n  }\n\n  toggleMenu(name: string) {\n    if (name === 'nodes') {\n      this.updateNetwork();\n    }\n    this.activeMenuItem[name] = !this.activeMenuItem[name];\n  }\n\n  updateNodeSize(by: string) {\n    // console.log('Change Node Size: ' + by);\n    this.cyGraph.setSizeBy(by);\n    this.updateNetwork();\n  }\n\n  updateNodeColor(by: string) {\n    // console.log('Change Node Color: ' + by);\n    this.cyGraph.setColorBy(by);\n    this.updateNetwork();\n  }\n\n  updateAllNodes(shown: boolean) {\n    if (this.layoutOnlyShared && shown) {\n      this.layoutOnlyShared = false;\n      this.cyGraph.setShowOnlySharedNodes(false);\n    }\n    this.cyGraph.setShowAllNodes(shown);\n    this.updateNetwork();\n  }\n\n  updateMtbNodes(shown: boolean) {\n    // console.log('MTB: ' + shown);\n    this.cyGraph.setShowMtbNodes(shown);\n  }\n\n  updateSharedNodes(shown: boolean) {\n    if (this.layoutAllNodes && shown) {\n      this.layoutAllNodes = false;\n      this.cyGraph.setShowAllNodes(false);\n    }\n    this.cyGraph.setShowOnlySharedNodes(shown);\n    this.updateNetwork();\n  }\n\n  updateThreshold(thresholds: ThresholdResponse) {\n    this.cyGraph.updateThreshold(thresholds);\n    this.updateNetwork();\n  }\n\n  updateNodeSort(column: string){\n    this.nodeSort = column;\n    this.updateNetwork();\n  }\n\n  updateNetwork() {\n    let nodes = this.cyGraph.getNetwork();\n    if (this.searchNode !== '') {\n      nodes = nodes.filter((node) => {\n        return (node.id.toLowerCase().indexOf(this.searchNode.toLowerCase()) !== -1);\n      });\n    }\n    if (this.nodeSort === 'name') {\n      nodes = nodes.sort((a, b) => {return a.id.localeCompare(b.id); });\n    } else {\n      nodes = nodes.sort((a, b) => {return this.nodeInfo[b.id][this.nodeSort] - this.nodeInfo[a.id][this.nodeSort]; });\n    }\n    this.nodes = nodes;\n  }\n\n  resetNodeSearch() {\n    this.searchNode = '';\n    this.updateNetwork();\n  }\n\n  highlightNode(node: string) {\n    // console.log('Highlight node: ' + node);\n    if(node === undefined) {\n      this.selectedNode = [];\n    } else {\n      const index = this.selectedNode.indexOf(node);\n      if (index > -1) {\n        this.selectedNode.splice(index, 1);\n      } else {\n        this.selectedNode.push(node);\n      }\n    }\n    this.cyGraph.highlightNode(this.selectedNode);\n  }\n\n  downloadImage(type: string) {\n    // console.log(type);\n    const image = this.cyGraph.getImage(type, this.downloadTransparent, this.downloadScaleImageBy);\n\n    let filename = 'test.' + type;\n    if (this.selectedMetastaticPatient === undefined && this.selectedNonmetastaticPatient === undefined){\n      filename = 'PPI_network.' + type;\n    } else if (this.selectedMetastaticPatient !== undefined && this.selectedNonmetastaticPatient === undefined) {\n      filename = this.selectedMetastaticPatient.name + '.' + type;\n    } else if (this.selectedMetastaticPatient === undefined && this.selectedNonmetastaticPatient !== undefined) {\n      filename = this.selectedNonmetastaticPatient.name + '.' + type;\n    } else {\n      filename = this.selectedMetastaticPatient.name + '_vs_' + this.selectedNonmetastaticPatient.name + '.' + type;\n    }\n    saveAs(image, filename);\n  }\n\n  fitGraphToViewport() {\n    this.cyGraph.fitGraphToViewport();\n  }\n}\n","<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <meta name=\"description\" content=\"Responsive sidebar template with sliding effect and dropdown menu based on bootstrap 3\">\n  <title>Sidebar template</title>\n  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\"\n        crossorigin=\"anonymous\">\n  <link href=\"https://use.fontawesome.com/releases/v5.13.0/css/all.css\" rel=\"stylesheet\">\n\n\n</head>\n\n<body>\n<div class=\"page-wrapper chiller-theme\" [class.toggled]=\"sideBarShown\">\n  <a id=\"show-sidebar\" class=\"btn btn-lg btn-dark\" href=\"#\" (click)=\"sideBarShown = true\">\n    <i class=\"fas fa-bars\"></i>\n  </a>\n  <nav id=\"sidebar\" class=\"sidebar-wrapper\">\n    <div class=\"sidebar-content\">\n      <div class=\"sidebar-brand\">\n        <a href=\"#\">Explore the Networks</a>\n        <div id=\"close-sidebar\" (click)=\"sideBarShown = false\">\n          <i class=\"fas fa-times\"></i>\n        </div>\n      </div>\n\n\n      <div class=\"sidebar-menu\">\n        <ul>\n          <li class=\"header-menu\">\n            <span class=\"navbar-text\">based on word-embedding network</span>\n          </li>\n        </ul>\n      </div>\n\n      <div class=\"sidebar-menu\">\n        <ul>\n          <li class=\"header-menu\">\n            <span>Settings</span>\n          </li>\n<!--Choose a Patient          -->\n          <li class=\"sidebar-dropdown\" [class.active]=\"activeMenuItem.patient\">\n            <a href=\"#\" (click)=\"toggleMenu('patient')\">\n              <i class=\"fas fa-hospital-user\"></i>\n              <span>Patients</span>\n<!--              <span class=\"badge badge-pill badge-warning\">New</span>-->\n            </a>\n            <div class=\"sidebar-submenu\" [style.display]=\"activeMenuItem.patient ? 'block':'none'\">\n              <ul>\n                <li class=\"row custom-form-group\">\n                  <div class=\"col-6 \">\n                    <p>\n                      <span>Metastatic Patient:</span>\n                      <select [(ngModel)]=\"selectedMetastaticPatient\" class=\"form-control\" (change)=\"setMetastaticPatient(selectedMetastaticPatient)\">\n                        <option class=\"dropdown-item\" selected [ngValue]=\"undefined\" ><hr/></option>\n                        <option class=\"dropdown-item\" *ngFor=\"let pat of patients.metastatic\" [ngValue]=\"pat\" >{{pat.name}} ({{pat.subtype}})</option>\n                      </select>\n                    </p>\n                    <span *ngIf=\"selectedMetastaticPatient !== undefined\">\n                      <p>Cancer Subtype: <br/><b>{{selectedMetastaticPatient.subtype}}</b></p>\n                      <p>Metastasis free Survival: <b>{{selectedMetastaticPatient.mfsYears}} years</b></p>\n                    </span>\n                  </div>\n                  <div class=\"col-6 \">\n                    <p>\n                      <span>Non-Metastatic Patient:</span>\n                      <select [(ngModel)]=\"selectedNonmetastaticPatient\" class=\"form-control\" (change)=\"setNonMetastaticPatient(selectedNonmetastaticPatient)\">\n                        <option class=\"dropdown-item\" selected [ngValue]=\"undefined\"><hr/></option>\n                        <option class=\"dropdown-item\" *ngFor=\"let pat of patients.nonmetastatic\" [ngValue]=\"pat\">{{pat.name}} ({{pat.subtype}})</option>\n                      </select>\n                    </p>\n                    <span *ngIf=\"selectedNonmetastaticPatient !== undefined\">\n                      <p>Cancer Subtype: <br/><b>{{selectedNonmetastaticPatient.subtype}}</b></p>\n                      <p>Metastasis free Survival: <b>{{selectedNonmetastaticPatient.mfsYears}} years</b></p>\n                    </span>\n                  </div>\n                </li>\n              </ul>\n            </div>\n          </li>\n\n<!--          Choose Threshold      -->\n          <li class=\"sidebar-dropdown\" [class.active]=\"activeMenuItem.threshold\">\n            <a href=\"#\" (click)=\"toggleMenu('threshold')\">\n              <i class=\"fas fa-sort-amount-up\"></i>\n              <span>Threshold</span>\n<!--              <span class=\"badge badge-pill badge-danger\">3</span>-->\n            </a>\n            <div class=\"sidebar-submenu\" [style.display]=\"activeMenuItem.threshold ? 'block':'none'\">\n              <ul *ngIf=\"thresholds !== undefined\">\n                <li [style.display]=\"(selectedMetastaticPatient !== undefined)&&(selectedNonmetastaticPatient === undefined) ? 'block':'none'\">\n                  <div class=\"input-group mb-3 custom-form-group\">\n                    <div class=\"input-group-prepend\">\n                      <span class=\"input-group-text\" id=\"basic-addon1\">Metastatic:</span>\n                    </div>\n                    <input type=\"text\" class=\"form-control\" id=\"metastatic-input\"\n                           value=\"{{thresholds.metastatic.selected / thresholds.multiplier}}\"\n                           aria-describedby=\"basic-addon3\" disabled>\n                  </div>\n                  <div class=\"form-group custom-form-group\">\n                    <input type=\"range\" class=\"custom-range\" id=\"customRange1\"\n                           min=\"{{thresholds.metastatic.threshold * thresholds.multiplier}}\"\n                           max=\"{{thresholds.metastatic.max * thresholds.multiplier}}\"\n                           [(ngModel)]=\"thresholds.metastatic.selected\"\n                           (change)=\"updateThreshold(thresholds)\">\n                    <div class=\"row justify-content-between\">\n                      <div class=\"col-4\">\n                        {{thresholds.metastatic.threshold}}\n                      </div>\n                      <div class=\"col-4 text-right\">\n                        {{thresholds.metastatic.max}}\n                      </div>\n                    </div>\n                  </div>\n                </li>\n                <li [style.display]=\"((selectedMetastaticPatient === undefined)&&(selectedNonmetastaticPatient !== undefined)) ? 'block':'none'\">\n                  <div class=\"input-group mb-3 custom-form-group\">\n                    <div class=\"input-group-prepend\">\n                      <span class=\"input-group-text\" id=\"basic-addon2\">Non-Metastatic:</span>\n                    </div>\n                    <input type=\"text\" class=\"form-control\" id=\"non-metastatic-input\"\n                           value=\"{{thresholds.nonmetastatic.selected / thresholds.multiplier}}\"\n                           aria-describedby=\"basic-addon3\" disabled>\n                  </div>\n                  <div class=\"form-group custom-form-group\">\n                    <input type=\"range\" class=\"custom-range\" id=\"customRange2\"\n                           min=\"{{thresholds.nonmetastatic.threshold * thresholds.multiplier}}\"\n                           max=\"{{thresholds.nonmetastatic.max * thresholds.multiplier}}\"\n                           [(ngModel)]=\"thresholds.nonmetastatic.selected\"\n                           (change)=\"updateThreshold(thresholds)\">\n                    <div class=\"row justify-content-between\">\n                      <div class=\"col-4\">\n                        {{thresholds.nonmetastatic.threshold}}\n                      </div>\n                      <div class=\"col-4 text-right\">\n                        {{thresholds.nonmetastatic.max}}\n                      </div>\n                    </div>\n                  </div>\n                </li>\n                <li [style.display]=\"((selectedMetastaticPatient !== undefined)&&(selectedNonmetastaticPatient !== undefined)) ? 'block':'none'\">\n                  <div class=\"input-group mb-3 custom-form-group\">\n                    <div class=\"input-group-prepend\">\n                      <span class=\"input-group-text\" id=\"basic-addon3\">Both Patients:</span>\n                    </div>\n                    <input type=\"text\" class=\"form-control\" id=\"both-patients-input\"\n                           value=\"{{thresholds.selected / thresholds.multiplier}}\"\n                           aria-describedby=\"basic-addon3\" disabled>\n                  </div>\n                  <div class=\"form-group custom-form-group\">\n                    <input type=\"range\" class=\"custom-range\" id=\"customRange3\"\n                           min=\"{{thresholds.minThreshold * thresholds.multiplier}}\"\n                           max=\"{{thresholds.maxThreshold * thresholds.multiplier}}\"\n                           [(ngModel)]=\"thresholds.selected\"\n                           (change)=\"updateThreshold(thresholds)\">\n                    <div class=\"row justify-content-between\">\n                      <div class=\"col-4\">\n                        {{thresholds.minThreshold}}\n                      </div>\n                      <div class=\"col-4 text-right\">\n                        {{thresholds.maxThreshold}}\n                      </div>\n                    </div>\n                  </div>\n                </li>\n                <li [style.display]=\"((selectedMetastaticPatient === undefined) && (selectedNonmetastaticPatient === undefined)) ? 'block':'none'\">\n                  <legend>Select some patients from the upper menu</legend>\n                </li>\n              </ul>\n            </div>\n          </li>\n          <!--      Choose a Node          -->\n          <li class=\"sidebar-dropdown\" [class.active]=\"activeMenuItem.nodes\">\n            <a href=\"#\" (click)=\"toggleMenu('nodes')\">\n              <i class=\"fas fa-project-diagram\"></i>\n              <span>Nodes</span>\n            </a>\n            <div class=\"sidebar-submenu\" [style.display]=\"activeMenuItem.nodes ? 'block':'none'\">\n              <div class=\"sidebar-search\">\n                <div>\n                  <div class=\"input-group\">\n                    <input type=\"text\" class=\"form-control search-menu\" placeholder=\"Search...\"\n                           [(ngModel)]=\"searchNode\"\n                           (input)=\"updateNetwork()\"\n                           autofocus>\n                    <!--                           autofocus>-->\n                    <div class=\"input-group-append\">\n                      <span class=\"input-group-text search-icon\">\n                        <i *ngIf=\"searchNode.length !== 0\" (click)=\"resetNodeSearch()\" class=\"far fa-times-circle\"></i>\n                        <i *ngIf=\"searchNode.length === 0\" class=\"fa fa-search\" aria-hidden=\"true\"></i>\n                      </span>\n                    </div>\n                    <button type=\"button\" class=\"btn btn-secondary\" disabled>{{nodes.length}}</button>\n                  </div>\n                </div>\n              </div>\n<!--              <ul class=\"list-group\">-->\n<!--                <li type=\"button\"-->\n<!--                    class=\"list-group-item list-group-item-dark\">Protein</li>-->\n<!--              </ul>-->\n<!--              <ul class=\"list-group\">-->\n<!--                <li type=\"button\"-->\n<!--                    class=\"list-group-item list-group-item-secondary\"-->\n<!--                    *ngFor=\"let node of nodes\"-->\n<!--                    (click)=\"highlightNode(node.id)\"-->\n<!--                [class.selected]=\"node.id === selectedNode\">{{node.id}} ({{nodeInfo[node.id].all}})</li>-->\n<!--              </ul>-->\n              <ul class=\"list-group\">\n              <table class=\"table table-hover table-dark\">\n                <thead>\n                <tr>\n                  <th scope=\"col\" class=\"w25\"\n                      (click)=\"updateNodeSort('name')\">Protein</th>\n                  <th scope=\"col\" class=\"w25\" *ngIf=\"selectedNonmetastaticPatient === undefined\"></th>\n                  <th scope=\"col\" class=\"w25\">\n                    <div *ngIf=\"selectedMetastaticPatient !== undefined\"\n                         (click)=\"updateNodeSort(selectedMetastaticPatient.subtype)\">\n                      {{selectedMetastaticPatient.subtype}} ({{subtypeCounts[selectedMetastaticPatient.subtype]}})\n                    </div>\n                  </th>\n                  <th scope=\"col\" class=\"w25\" *ngIf=\"selectedNonmetastaticPatient !== undefined\"\n                      (click)=\"updateNodeSort(selectedNonmetastaticPatient.subtype)\">\n                      {{selectedNonmetastaticPatient.subtype}} ({{subtypeCounts[selectedNonmetastaticPatient.subtype]}})\n                  </th>\n                  <th scope=\"col\" class=\"w25\"\n                      (click)=\"updateNodeSort('all')\">\n                    All ({{subtypeCounts !== undefined ? subtypeCounts[\"all\"] : \"\"}})\n                  </th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr *ngFor=\"let node of nodes\"\n                  (click)=\"highlightNode(node.id)\"\n                  [class.selected]=\"selectedNode.includes(node.id)\">\n                  <td class=\"w25\">{{node.id}}</td>\n                  <td class=\"w25\" *ngIf=\"selectedNonmetastaticPatient === undefined || selectedMetastaticPatient === selectedNonmetastaticPatient\"></td>\n                  <td class=\"w25\">{{selectedMetastaticPatient !== undefined ? nodeInfo[node.id][selectedMetastaticPatient.subtype] : \"\"}}</td>\n                  <td class=\"w25\" *ngIf=\"selectedNonmetastaticPatient !== undefined && selectedMetastaticPatient !== selectedNonmetastaticPatient\">{{nodeInfo[node.id][selectedNonmetastaticPatient.subtype]}}</td>\n                  <td class=\"w25\">{{nodeInfo[node.id].all}}</td>\n                </tr>\n                </tbody>\n              </table>\n              </ul>\n              <ul class=\"list-group\">\n                <button type=\"button\" class=\"btn btn-secondary\"\n                        (click)=\"highlightNode(undefined)\"\n                        [style.display]=\"selectedNode.length === 0 ? 'none':'block'\">unselect</button>\n              </ul>\n            </div>\n          </li>\n                <!--          Choose Layout      -->\n          <li class=\"sidebar-dropdown\" [class.active]=\"activeMenuItem.layout\">\n            <a href=\"#\" (click)=\"toggleMenu('layout')\">\n              <i class=\"fas fa-palette\"></i>\n              <span>Layout</span>\n            </a>\n            <div class=\"sidebar-submenu\" [style.display]=\"activeMenuItem.layout ? 'block':'none'\">\n              <ul>\n                <li class=\"form-group\" [style.display]=\"((selectedMetastaticPatient !== undefined) || (selectedNonmetastaticPatient !== undefined)) ? 'block':'none'\">\n                  <legend>Color Nodes</legend>\n                  <div *ngFor=\"let opt of objectKeys(layoutNodeColorOptions)\" class=\"custom-control custom-radio \"  >\n                    <input type=\"radio\" id=\"nodeColorBy{{opt}}\" name=\"customRadioNodeColor\" class=\"custom-control-input\"\n                           [(ngModel)]=\"layoutNodeColor\"\n                           [value]=\"opt\"\n                           (change)=\"updateNodeColor(layoutNodeColor)\"\n                           [checked]=\"layoutNodeColor===opt\">\n                    <label class=\"custom-control-label layout-list-label\" for=\"nodeColorBy{{opt}}\">\n                      <div>by {{layoutNodeColorOptions[opt]}}\n                        <strong *ngIf=\"opt==='geLevel' && layoutNodeColor === opt\">(\n                          <b style=\"background-color:#599eff;color:#383838;\">Low</b>,\n                          <b style=\"background-color:#e8e857;color:#383838;\">Normal</b>,\n                          <b style=\"background-color:#ff3d6a;color:#383838;\">High</b>)\n                        </strong>\n                        <div class=\"color-legend\" *ngIf=\"opt === 'ge' && layoutNodeColor === opt\" align=\"center\">\n                          <div class=\"from\">{{patients.geMin | number:'1.1-1'}}</div>\n                          <div class=\"mid-ge\"></div>\n                          <div class=\"to\">{{patients.geMax | number:'1.1-1'}}</div>\n                        </div>\n                        <div class=\"color-legend\" *ngIf=\"opt === 'rel' && layoutNodeColor === opt\" align=\"center\">\n                          <div class=\"from\">{{thresholds.minThreshold}}</div>\n                          <div class=\"mid-rel\"></div>\n                          <div class=\"to\">{{thresholds.maxThreshold}}</div>\n                        </div>\n                      </div>\n                    </label>\n                  </div>\n                </li>\n                <li class=\"form-group\" [style.display]=\"((selectedMetastaticPatient !== undefined) || (selectedNonmetastaticPatient !== undefined)) ? 'block':'none'\">\n                  <legend>Show All Nodes\n                    <label class=\"switch\" >\n                      <input type=\"checkbox\" class=\"primary\" [(ngModel)]=\"layoutAllNodes\" (change)=\"updateAllNodes(layoutAllNodes)\">\n                      <span class=\"slider round\"></span>\n                    </label>\n                  </legend>\n                  <legend>Show MTB results <div class=\"circle\"></div>\n                    <label class=\"switch\" >\n                      <input type=\"checkbox\" class=\"primary\" [(ngModel)]=\"layoutMtbNodes\" (change)=\"updateMtbNodes(layoutMtbNodes)\">\n                      <span class=\"slider round\"></span>\n                    </label>\n                  </legend>\n                  <legend [style.display]=\"((selectedMetastaticPatient !== undefined) && (selectedNonmetastaticPatient !== undefined)) ? 'block':'none'\">\n                    Show Only Shared Nodes\n                    <label class=\"switch\" >\n                      <input type=\"checkbox\" class=\"primary\" [(ngModel)]=\"layoutOnlyShared\" (change)=\"updateSharedNodes(layoutOnlyShared)\">\n                      <span class=\"slider round\"></span>\n                    </label>\n                  </legend>\n                </li>\n                <li class=\"form-group\" [style.display]=\"XOR((selectedMetastaticPatient !== undefined), (selectedNonmetastaticPatient !== undefined)) ? 'block':'none'\">\n                  <legend>Set Node Size</legend>\n                  <div *ngFor=\"let opt of objectKeys(layoutNodeSizeOptions)\" class=\"custom-control custom-radio custom-control-inline\"  >\n                    <input type=\"radio\" id=\"nodeSizeBy{{opt}}\" name=\"customRadioNodeSize\" class=\"custom-control-input\"\n                           [(ngModel)]=\"layoutNodeSize\"\n                           [value]=\"opt\"\n                           (change)=\"updateNodeSize(layoutNodeSize)\"\n                           [checked]=\"layoutNodeSize===opt\">\n                    <label class=\"custom-control-label\" for=\"nodeSizeBy{{opt}}\">by {{layoutNodeSizeOptions[opt]}}</label>\n                  </div>\n                </li>\n                <li class=\"row mb-3 custom-form-group\">\n                  <div class=\"col-12\">\n                    <button class=\"btn btn-block btn-secondary\" (click)=\"fitGraphToViewport()\">\n                      Fit Graph To Viewport\n                    </button>\n                  </div>\n                </li>\n                <li [style.display]=\"((selectedMetastaticPatient === undefined) && (selectedNonmetastaticPatient === undefined)) ? 'block':'none'\">\n                  <legend>Select some patients from the upper menu</legend>\n                </li>\n              </ul>\n            </div>\n          </li>\n<!--          Download Network as Image     -->\n          <li class=\"sidebar-dropdown\" [class.active]=\"activeMenuItem.download\">\n            <a href=\"#\" (click)=\"toggleMenu('download')\">\n              <i class=\"fas fa-arrow-circle-down\"></i>\n              <span>Download</span>\n            </a>\n            <div class=\"sidebar-submenu\" [style.display]=\"activeMenuItem.download ? 'block':'none'\">\n              <ul>\n                <li class=\"row mb-3 custom-form-group\">\n                    <div class=\"btn-group btn-group-toggle col-6\" data-toggle=\"buttons\">\n                      <label class=\"btn btn-secondary\" [class.active]=\"downloadFormat ==='png'\">\n                        <input type=\"radio\" name=\"options\" id=\"downloadFormat1\"\n                               [(ngModel)]=\"downloadFormat\"\n                               value=\"png\"\n                               [checked]=\"downloadFormat === 'png'\"> PNG\n                      </label>\n                      <label class=\"btn btn-secondary\" [class.active]=\"downloadFormat ==='jpg'\">\n                        <input type=\"radio\" name=\"options\" id=\"downloadFormat2\"\n                               [(ngModel)]=\"downloadFormat\"\n                               value=\"jpg\"\n                               [checked]=\"downloadFormat ==='jpg'\"> JPEG\n                      </label>\n                    </div>\n                    <div class=\"col-6 text-right\">\n                      <button class=\"btn btn-secondary btn-small\" (click)=\"downloadImage(downloadFormat)\">\n                        Download\n                      </button>\n                    </div>\n                </li>\n                <li>\n                  <div class=\"input-group mb-3 custom-form-group\">\n                    <div class=\"input-group-prepend\">\n                      <span class=\"input-group-text\" id=\"scaleImage\">Scale Image by </span>\n                    </div>\n                    <input type=\"text\" class=\"form-control\" id=\"scaleImage-input\"\n                           [(ngModel)]=\"downloadScaleImageBy\"\n                           aria-describedby=\"scaleImage\">\n                  </div>\n                </li>\n                <li class=\"form-group\" [style.display]=\"downloadFormat !== 'jpg' ? 'block':'none'\">\n                  <legend>Transparent Background\n                    <label class=\"switch\" >\n                      <input type=\"checkbox\" class=\"primary\" [(ngModel)]=\"downloadTransparent\" >\n                      <span class=\"slider round\"></span>\n                    </label>\n                  </legend>\n                </li>\n              </ul>\n            </div>\n          </li>\n\n        </ul>\n      </div>\n      <!-- sidebar-menu  -->\n      <div class=\"sidebar-menu\" [style.display]=\"activeMenuItem.impressum ? 'block':'none'\">\n        <h3><a href=\"http://mypathsem.bioinf.med.uni-goettingen.de/\">MyPathSem Project</a></h3>\n        <h3><a href=\"http://mypathsem.bioinf.med.uni-goettingen.de/impressum\">Impressum</a></h3>\n        <h3><a href=\"http://mypathsem.bioinf.med.uni-goettingen.de/datenschutz\">Datenschutz</a></h3>\n      </div>\n    </div>\n    <!-- sidebar-content  -->\n        <div class=\"sidebar-footer\">\n          <a href=\"#\" (click)=\"toggleMenu('impressum')\">\n           Impressum\n          </a>\n        </div>\n  </nav>\n\n  <!-- sidebar-wrapper  -->\n  <main class=\"page-content\">\n    <div #page class=\"container-fluid\" style=\"height: 100%;\">\n      <div #heading class=\"row\">\n        <h2>{{title}}</h2>\n      <hr>\n      </div>\n      <div #cy class=\"row\" [ngStyle]=\"{'height.px': page.offsetHeight - heading.offsetHeight -50}\" ></div>\n    </div>\n\n  </main>\n  <!-- page-content\" -->\n</div>\n<!-- page-wrapper -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\"\n        crossorigin=\"anonymous\"></script>\n<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\"\n        crossorigin=\"anonymous\"></script>\n\n</body>\n\n</html>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppComponent } from './app.component';\nimport {FormsModule} from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {ElementRef, Injectable, ViewChild} from '@angular/core';\nimport {DataLoaderService} from './data-loader.service';\nimport {Network} from './network';\nimport cytoscape from 'cytoscape';\nimport {Patient} from './patient';\nimport {ThresholdResponse} from './threshold-response';\nimport {Threshold} from './threshold';\nimport {min} from 'rxjs/operators';\nimport {AppComponent} from './app.component';\nimport {Edge} from './edge';\nimport {style} from '@angular/animations';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CyGraphService {\n  private colors = {\n    red: '#ff3d6a',\n    yellow: '#e8e857',\n    // yellow: '#d6d656',\n    blue: '#599eff',\n    green: '#0b0',\n    gray: '#888',\n    highlight: '#333'\n  }\n\n  // private appComponent: AppComponent;\n  private cy: any;\n  private metPat: Patient;\n  private nonPat: Patient;\n  private showAllNodes = false;\n  private showOnlySharedNodes = false;\n  private showMtbNodes: boolean;\n  private sizeBy: string;\n  private colorBy: string;\n  private thresholds: ThresholdResponse;\n  private geMin: number;\n  private geMax: number;\n  private highlightedNode: string;\n\n  constructor(private dataLoader: DataLoaderService) { }\n\n\n  initGraph(cyDiv: ElementRef, network: Network, sizeBy: string, colorBy: string) {\n    this.sizeBy = sizeBy;\n    this.colorBy = colorBy;\n    // console.log(\"In the init of cyService\");\n    this.dataLoader.getNetwork().subscribe((network) => {\n      // console.log(\"init cytoscape\");\n      const layer = {};\n      const numberOfLayers = 11;\n      network.nodes.forEach((node, i) => {\n        if(i < 1) {\n          layer[node.data.id] = numberOfLayers;     //1\n        } else if (i < 5) {                          //5=4+1\n          layer[node.data.id] = numberOfLayers - 1;  //4\n        } else if (i < 17) {                         //17=12+5\n          layer[node.data.id] = numberOfLayers - 2;  //12=4*3\n        } else if (i < 37) {                         //53=36+17\n          layer[node.data.id] = numberOfLayers - 3;  //36=12*3\n        } else if (i < 61) {                        //161=108+53\n          layer[node.data.id] = numberOfLayers - 4;  //108=36*3\n        } else if (i < 93) {\n          layer[node.data.id] = numberOfLayers - 5;\n        } else if (i < 133) {\n          layer[node.data.id] = numberOfLayers - 6;\n        } else if (i < 173) {\n          layer[node.data.id] = numberOfLayers - 7;\n        } else if (i < 225) {\n          layer[node.data.id] = numberOfLayers - 8;\n        } else if (i < 285) {\n          layer[node.data.id] = numberOfLayers - 9;\n        } else if (i < 345) {\n          layer[node.data.id] = numberOfLayers - 10;\n        } else if (i < 405) {\n          layer[node.data.id] = numberOfLayers - 11;\n        } else {\n          layer[node.data.id] = numberOfLayers - 12;\n        }\n      });\n\n\n      // console.log('Layer: ' + network.nodes[1].layer);\n\n      this.cy = cytoscape({\n              container: cyDiv.nativeElement, // container to render in\n\n              elements: network,\n\n              style: [ // the stylesheet for the graph\n                {\n                  selector: 'node',\n                  style: {\n                    label: 'data(id)',\n                    'text-valign': 'center',\n                    'background-color': this.colors.gray,\n                    color: '#fff',\n                    // color: '#242424',\n                    'text-outline-color': this.colors.gray,\n                    'text-outline-width': '5px',\n                    width: '50px', height: '50px'\n                  }\n                },\n                {\n                  selector: 'node[color], node[colorMet], node[colorNonMet]',\n                  style: {\n                      color: '#383838',\n                      'font-weight': 'bold',\n                  }\n                },\n                {\n                  selector: 'node[!shown]',\n                  style: {\n                    visibility: 'hidden'\n                  }\n                },\n\n                {\n                  selector: 'node.mtb',\n                  style: {\n                    'border-width': '15px',\n                    'border-color': this.colors.green\n                  }\n                },\n                {\n                  selector: 'node.split',\n                  style: {\n                    'text-outline-width': '0px',\n                    'text-outline-color': this.colors.gray,\n                    'text-outline-opacity': '0.3',\n                    width: '80px', height: '80px',\n                    'pie-size': '100%',\n                    'pie-1-background-color': 'green',\n                    'pie-1-background-size': '50%',\n                    'pie-2-background-color': 'green',\n                    'pie-2-background-size': '50%'\n                  }\n                },\n                {\n                  selector: 'node.splitLeft',\n                  style: {\n                    'text-outline-width': '0px',\n                    'text-outline-color': this.colors.gray,\n                    'text-outline-opacity': '0.3',\n                    width: '80px', height: '80px',\n                    'pie-size': '100%',\n                    'pie-1-background-color': 'green',\n                    'pie-1-background-size': '50%',\n                    'pie-2-background-color': 'green',\n                    'pie-2-background-size': '50%'\n                  }\n                },\n\n                {\n                  selector: 'node.highlight',\n                  style: {\n                    'border-width': '13px',\n                    'border-color': this.colors.highlight,\n                  }\n                },\n                {\n                  selector: 'edge[!shown]',\n                  style: {\n                    visibility: 'hidden'\n                  }\n                },\n\n                {\n                  selector: 'edge',\n                  style: {\n                    width: 3,\n                    'line-color': '#ccc',\n                    'target-arrow-color': '#ccc',\n                    'target-arrow-shape': 'triangle'\n                  }\n                },\n\n                {\n                  selector: 'edge.highlight',\n                  style: {\n                    width: 3,\n                    'line-color': this.colors.highlight,\n                  }\n                }\n\n              ],\n              layout: {\n                name: 'concentric',\n                levelWidth( nodes ) { // the letiation of concentric values in each level\n                  return 1;\n                },\n                concentric( node ) { // returns numeric value for each node, placing higher nodes in levels towards the centre\n                  // console.log('Node: ' + node.data('id') + ' Layer: ' + layer[node.data('id')]);\n                  return layer[node.data('id')];\n                },\n                spacingFactor: 1.65\n              }\n              // layout: {\n              //   name: 'grid',\n              // }\n            })\n      this.cy.elements('node,edge')\n        .data('shown', true);\n    });\n  }\n\n\n  setGeRange(geMin: number, geMax: number) {\n    this.geMin = geMin;\n    this.geMax = geMax;\n    // console.log('ge range: '+this.geMin+'-'+this.geMax);\n  }\n\n  setMetastaticPatient(metPat: Patient) {\n    this.metPat = metPat;\n    this.layoutPatient();\n  }\n\n  setNonMetastaticPatient(nonPat: Patient) {\n    this.nonPat = nonPat;\n    this.layoutPatient();\n  }\n\n  setShowAllNodes(shown: boolean) {\n    this.showAllNodes = shown;\n    this.updataShownNodes();\n  }\n\n  setShowOnlySharedNodes(shown: boolean) {\n    this.showOnlySharedNodes = shown;\n    this.updataShownNodes();\n  }\n\n  setShowMtbNodes(shown: boolean) {\n    this.showMtbNodes = shown;\n    this.updateMtbNodes();\n  }\n\n  setSizeBy(by: string) {\n    this.sizeBy = by;\n    this.layoutPatient();\n  }\n\n  setColorBy(by: string) {\n    this.colorBy = by;\n    this.layoutPatient();\n  }\n\n  getNetwork() {\n    const nodes = [];\n    this.cy.elements('node[?shown]').forEach((node) => {\n      // console.log('Get Network from CS: ' + Object.keys(node.data()) + Object.values(node.data()));\n      nodes.push({id: node.id(), connected: node.connectedEdges()});\n    });\n    return nodes;\n  }\n\n  private updataShownNodes() {\n    this.cy.batch(() => {\n      this.cy.elements('node[member]')\n        .data('shown', true);\n      this.cy.elements('node[!member]')\n        .data('shown', this.showAllNodes);\n      this.cy.elements('node[member]')\n        .connectedEdges()\n        .data('shown', true);\n      this.cy.elements('node[!member]')\n        .connectedEdges()\n        .data('shown', this.showAllNodes);\n      this.cy.elements('node.split[colorMet][^colorNonMet]')\n        .data('shown', !this.showOnlySharedNodes);\n      this.cy.elements('node.split[^colorMet][colorNonMet]')\n        .data('shown', !this.showOnlySharedNodes);\n      this.cy.elements('node.split[colorMet][^colorNonMet], node.split[^colorMet][colorNonMet]')\n        .connectedEdges('edge[?shown]')\n        .data('shown', !this.showOnlySharedNodes);\n    });\n  }\n\n  private clear() {\n    this.cy.batch(() => {\n      this.cy.elements('node')\n        .removeData('member')\n        .removeData('color')\n        .removeData('colorMet')\n        .removeData('colorNonMet')\n        .removeData('size')\n        .removeClass('mtb')\n        .removeClass('split');\n      this.removeSizeMap();\n      // this.updataShownNodes();\n    });\n  }\n\n  private setSizeMap(minValue, maxValue) {\n    const sizeMap = 'mapData(size, ' + minValue + ', ' + maxValue + ', 50, 130)';\n    const fontSizeMap = 'mapData(size, ' + minValue + ', ' + maxValue + ', 18, 30)';\n    this.cy.style()\n      .selector('node[?member]')\n      .style('width', sizeMap)\n      .style('height', sizeMap)\n      .style('font-size', fontSizeMap);\n  }\n\n  private removeSizeMap() {\n    this.cy.style()\n      .selector('node[?member]')\n      // .style('background-color', this.colors.gray)\n      // .style('text-outline-color', this.colors.gray)\n      .style('width', '50px')\n      .style('height', '50px')\n      .style('font-size', '18px');\n  }\n\n  private setColorMap(minValue, maxValue) {\n    const midPoint = maxValue - ((maxValue - minValue) / 2);\n    const colorMap1 = 'mapData(color, ' + minValue + ', ' + maxValue + ', ' + this.colors.blue + ', ' + this.colors.yellow + ')';\n    const colorMap2 = 'mapData(color, ' + minValue + ', ' + maxValue + ', ' + this.colors.yellow + ', ' + this.colors.red + ')';\n    this.cy.style()\n      .selector('node[color<=' + midPoint + ']')\n      .style('background-color', colorMap1)\n      .style('text-outline-color', colorMap1)\n      .selector('node[color>' + midPoint + ']')\n      .style('background-color', colorMap2)\n      .style('text-outline-color', colorMap2);\n  }\n\n  private setSplitColorMap(minValueMet, maxValueMet, minValueNonMet, maxValueNonMet) {\n    const midPointMet = maxValueMet - ((maxValueMet - minValueMet) / 2);\n    const midPointNonMet = maxValueNonMet - ((maxValueNonMet - minValueNonMet) / 2);\n    const colorMapMet1 = 'mapData(colorMet, ' + minValueMet + ', ' + maxValueMet + ', ' + this.colors.blue + ', ' + this.colors.yellow + ')';\n    const colorMapMet2 = 'mapData(colorMet, ' + minValueMet + ', ' + maxValueMet + ', ' + this.colors.yellow + ', ' + this.colors.red + ')';\n    const colorMapNonMet1 = 'mapData(colorNonMet, ' + minValueNonMet + ', ' + maxValueNonMet + ', ' + this.colors.blue + ', ' + this.colors.yellow + ')';\n    const colorMapNonMet2 = 'mapData(colorNonMet, ' + minValueNonMet + ', ' + maxValueNonMet + ', ' + this.colors.yellow + ', ' + this.colors.red + ')';\n    this.cy.style()\n      .selector('node.split[colorMet][colorNonMet]')\n      .style('width', '80px')\n      .style('height', '80px')\n      .selector('node.split[colorMet<=' + midPointMet + ']')\n      .style('pie-2-background-color', colorMapMet1)\n      .selector('node.split[colorMet>' + midPointMet + ']')\n      .style('pie-2-background-color', colorMapMet2)\n      .selector('node.split[colorNonMet<=' + midPointNonMet + ']')\n      .style('pie-1-background-color', colorMapNonMet1)\n      .selector('node.split[colorNonMet>' + midPointNonMet + ']')\n      .style('pie-1-background-color', colorMapNonMet2)\n      .selector('node.split[colorMet][^colorNonMet]')\n      .style('pie-1-background-color', this.colors.gray)\n      .selector('node.split[^colorMet][colorNonMet]')\n      .style('pie-2-background-color', this.colors.gray);\n  }\n\n  private setColorDisc() {\n    this.cy.style()\n      .selector('node[color]')\n      // .style('color', '#242424')\n      .style('font-weight', 'bold')\n      .selector('node[color = \\'LOW\\']')\n      .style('background-color', this.colors.blue)\n      .style('text-outline-color', this.colors.blue)\n      .selector('node[color = \\'NORMAL\\']')\n      .style('background-color', this.colors.yellow)\n      .style('text-outline-color', this.colors.yellow)\n      .selector('node[color = \\'HIGH\\']')\n      .style('background-color', this.colors.red)\n      .style('text-outline-color', this.colors.red)\n      .selector('node.split[colorMet][colorNonMet]')\n      .style('width', '80px')\n      .style('height', '80px')\n      .selector('node.split[^colorMet], node.split[^colorNonMet]')\n      .style('pie-2-background-color', this.colors.gray)\n      .style('pie-1-background-color', this.colors.gray)\n      .selector('node.split[colorMet = \\'LOW\\']')\n      .style('pie-2-background-color', this.colors.blue)\n      .selector('node.split[colorNonMet = \\'LOW\\']')\n      .style('pie-1-background-color', this.colors.blue)\n      .selector('node.split[colorMet = \\'NORMAL\\']')\n      .style('pie-2-background-color', this.colors.yellow)\n      .selector('node.split[colorNonMet = \\'NORMAL\\']')\n      .style('pie-1-background-color', this.colors.yellow)\n      .selector('node.split[colorMet = \\'HIGH\\']')\n      .style('pie-2-background-color', this.colors.red)\n      .selector('node.split[colorNonMet = \\'HIGH\\']')\n      .style('pie-1-background-color', this.colors.red);\n  }\n\n  updateMtbNodes() {\n    if (this.showMtbNodes) {\n      this.cy.style()\n        .selector('node.mtb')\n        .style('border-width', '7px');\n    } else {\n      this.cy.style()\n        .selector('node.mtb')\n        .style('border-width', '0px');\n    }\n    this.layoutPatient();\n  }\n\n  private visualizeOne(pat: Patient, threshold: Threshold) {\n    // console.log('Layout Patient: ' + pat.name);\n    this.cy.batch(() => {\n      this.clear();\n\n      let size: string;\n      if (this.sizeBy === 'rel') {\n        size = 'score';\n        this.setSizeMap(threshold.threshold, threshold.max);\n        // this.setSizeMap(pat.getMinScore(), pat.getMaxScore());\n      } else if (this.sizeBy === 'ge') {\n        size = 'ge';\n        this.setSizeMap(pat.getMinGe(), pat.getMaxGe());\n      }\n\n      let color: string;\n      if (this.colorBy === 'rel') {\n        color = 'score';\n        this.setColorMap(threshold.threshold, threshold.max);\n        // this.setColorMap(pat.getMinScore(), pat.getMaxScore());\n      } else if (this.colorBy === 'ge') {\n        color = 'ge';\n        this.setColorMap(this.geMin, this.geMax);\n      } else if (this.colorBy === 'geLevel') {\n        color = 'geLevel';\n        this.setColorDisc();\n      }\n\n      for (const data of pat.patientData) {\n        // console.log(\"Score: \" + data.score + \" Threshold: \" + (threshold.selected / this.thresholds.multiplier) + \" IF: \" + (data.score >= (threshold.selected / this.thresholds.multiplier)));\n        if (data.score >= (threshold.selected / this.thresholds.multiplier)) {\n          // console.log('size: ' + size);\n          // console.log('Patient Data: ' + data);\n          const node = this.cy.getElementById(data.name)\n            .data('member', true)\n            .data('shown', true)\n            .data('size', data[size])\n            .data('color', data[color]);\n          if (data.mtb) {\n            node.addClass('mtb');\n          }\n        }\n      }\n\n      this.updataShownNodes();\n    });\n  }\n\n  private visualizeTwo() {\n    // console.log('Layout Two Patients: ' + this.metPat.name + ' and ' + this.nonPat.name);\n    this.cy.batch(() => {\n      this.clear();\n\n      let color: string;\n      if (this.colorBy === 'rel') {\n        color = 'score';\n        const minValue = Math.min(this.thresholds.metastatic.threshold, this.thresholds.nonmetastatic.threshold);\n        const maxValue = Math.max(this.thresholds.metastatic.max, this.thresholds.nonmetastatic.max);\n        this.setColorMap(minValue, maxValue);\n        this.setSplitColorMap(\n          this.thresholds.metastatic.threshold, this.thresholds.metastatic.max,\n          this.thresholds.nonmetastatic.threshold, this.thresholds.nonmetastatic.max\n        );\n      } else if (this.colorBy === 'ge') {\n        color = 'ge';\n        // const minValue = Math.min(this.metPat.getMinGe(), this.nonPat.getMinGe());\n        // const maxValue = Math.min(this.metPat.getMaxGe(), this.nonPat.getMaxGe());\n        // this.setColorMap(minValue, maxValue);\n        // this.setSplitColorMap(\n        //   this.metPat.getMinGe(), this.metPat.getMaxGe(),\n        //   this.nonPat.getMinGe(), this.nonPat.getMaxGe()\n        // );\n        this.setSplitColorMap(\n          this.geMin, this.geMax,\n          this.geMin, this.geMax\n        );\n      } else if (this.colorBy === 'geLevel') {\n        color = 'geLevel';\n        this.setColorDisc();\n      }\n\n      for (const data of this.metPat.patientData) {\n        if (data.score >= (this.thresholds.selected / this.thresholds.multiplier)) {\n          const node = this.cy.getElementById(data.name)\n            .data('member', true)\n            .data('shown', true)\n            .addClass('split')\n            .data('colorMet', data[color]);\n          if (data.mtb) {\n            node.addClass('mtb');\n          }\n        }\n      }\n      for (const data of this.nonPat.patientData) {\n        if (data.score >= (this.thresholds.selected / this.thresholds.multiplier)) {\n          const node = this.cy.getElementById(data.name)\n            .data('member', true)\n            .data('shown', true)\n            .addClass('split')\n            .data('colorNonMet', data[color]);\n          if (data.mtb) {\n            node.addClass('mtb');\n          }\n        }\n      }\n\n      this.updataShownNodes();\n    });\n  }\n\n\n  private visualizeTwo_old() {\n    // console.log('Layout Two Patients: ' + this.metPat.name + ' and ' + this.nonPat.name);\n    this.cy.batch(() => {\n      this.clear();\n\n      let color: string;\n      if (this.colorBy === 'rel') {\n        color = 'score';\n        const minValue = Math.min(this.thresholds.metastatic.threshold, this.thresholds.nonmetastatic.threshold);\n        const maxValue = Math.max(this.thresholds.metastatic.max, this.thresholds.nonmetastatic.max);\n        this.setColorMap(minValue, maxValue);\n        this.setSplitColorMap(\n          this.thresholds.metastatic.threshold, this.thresholds.metastatic.max,\n          this.thresholds.nonmetastatic.threshold, this.thresholds.nonmetastatic.max\n        );\n      } else if (this.colorBy === 'ge') {\n        color = 'ge';\n        const minValue = Math.min(this.metPat.getMinGe(), this.nonPat.getMinGe());\n        const maxValue = Math.min(this.metPat.getMaxGe(), this.nonPat.getMaxGe());\n        this.setColorMap(minValue, maxValue);\n        this.setSplitColorMap(\n          this.metPat.getMinGe(), this.metPat.getMaxGe(),\n          this.nonPat.getMinGe(), this.nonPat.getMaxGe()\n        );\n      } else if (this.colorBy === 'geLevel') {\n        color = 'geLevel';\n        this.setColorDisc();\n      }\n\n      const combinedPats = {};\n      for (const pat of this.metPat.patientData) {\n        combinedPats[pat.name] = [pat];\n      }\n      for (const pat of this.nonPat.patientData) {\n        if (Object.keys(combinedPats).indexOf(pat.name) > -1) {\n          combinedPats[pat.name].push(pat);\n        } else {\n          combinedPats[pat.name] = [pat];\n        }\n      }\n\n      for (const nodeId of Object.keys(combinedPats)) {\n        // console.log(\"Score: \" + data.score + \" Threshold: \" + (threshold.selected / this.thresholds.multiplier) + \" IF: \" + (data.score >= (threshold.selected / this.thresholds.multiplier)));\n        let data = combinedPats[nodeId];\n        // console.log(\"Node: \" + nodeId + \" Data: \" + data + \" Length: \" + data.length);\n        if (data.length === 2) {\n          // console.log(\"Min Score: \" + Math.max(data[0].score, data[1].score) + \" Threshold: \" + (this.thresholds.selected / this.thresholds.multiplier));\n          if (Math.max(data[0].score, data[1].score) >= (this.thresholds.selected / this.thresholds.multiplier)) {\n            // console.log('Patient Data: ' + data);\n            const node = this.cy.getElementById(nodeId)\n              .data('member', true)\n              .data('shown', true)\n              .addClass('split')\n              .data('colorMet', data[0][color])\n              .data('colorNonMet', data[1][color]);\n            if (data.mtb) {\n              node.addClass('mtb');\n            }\n          }\n        } else {\n          data = data[0];\n          if (data.score >= (this.thresholds.selected / this.thresholds.multiplier)) {\n            // console.log('Patient Data: ' + data);\n            const node = this.cy.getElementById(data.name)\n              .data('member', true)\n              .data('shown', true)\n              .data('color', data[color]);\n            if (data.mtb) {\n              node.addClass('mtb');\n            }\n          }\n        }\n      }\n\n      this.updataShownNodes();\n    });\n  }\n\n  layoutPatient() {\n    // console.log('Met Patient defined: ' + (this.metPat !== undefined));\n    // console.log('Non Patient defined: ' + (this.nonPat !== undefined));\n    if ((this.metPat !== undefined) && (this.nonPat !== undefined)) {\n      // console.log('Layout two patients!');\n      this.clear();\n      this.visualizeTwo();\n    } else if (this.metPat !== undefined) {\n      // console.log('Layout metPat!');\n      this.visualizeOne(this.metPat, this.thresholds.metastatic);\n    } else if (this.nonPat !== undefined) {\n      // console.log('Layout nonPat!');\n      this.visualizeOne(this.nonPat, this.thresholds.nonmetastatic);\n    } else {\n      // console.log('Nothing to layout!');\n      this.clear();\n      this.cy.elements('node')\n        .data('shown', true);\n      // this.updataShownNodes();\n    }\n  }\n\n  setThreshold(thresholds: ThresholdResponse) {\n    this.thresholds = thresholds;\n  }\n\n  updateThreshold(thresholds: ThresholdResponse) {\n    this.thresholds = thresholds;\n    this.layoutPatient();\n  }\n\n  getImage(type: string, transparent: boolean, scaleBy: number) {\n    let image;\n    const bgColor = transparent ? 'transparent' : 'white';\n    if (type === 'png') {\n      image = this.cy.png({bg: bgColor, scale: scaleBy});\n    } else {\n      image = this.cy.jpg({scale: scaleBy});\n    }\n    return image;\n  }\n\n  highlightNode(nodes: string[]) {\n    this.cy.elements('node')\n      .removeClass('highlight');\n    this.cy.elements('edge')\n      .removeClass('highlight');\n    if (nodes !== undefined) {\n      nodes.forEach((node) => {\n        this.cy.getElementById(node)\n          .addClass('highlight')\n          .connectedEdges()\n          .addClass('highlight');\n      });\n    }\n  }\n\n  fitGraphToViewport() {\n    this.cy.fit(this.cy.elements('node[?shown]'));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {PatientsResponse} from './patients-response';\nimport {PatientData} from './patient-data';\nimport {Network} from './network';\nimport {Observable} from 'rxjs';\nimport {ThresholdResponse} from './threshold-response';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataLoaderService {\n\n  private patientsUrl = 'assets/data/patients.json';\n  private patientDataUrl = 'assets/data/patient/';\n  private thresholdUrl = 'assets/data/thresholds.json';\n  private networkUrl = 'assets/data/network.json';\n\n  constructor(private httpClient: HttpClient) {}\n\n  getPatients(): Observable<PatientsResponse> {\n    return this.httpClient.get<PatientsResponse>(this.patientsUrl);\n  }\n\n  getPatientData(patientId: string): Observable<PatientData[]> {\n    // console.log('Called get patient data: ' + this.patientDataUrl + patientId + '.json');\n    return this.httpClient.get<PatientData[]>(this.patientDataUrl + patientId + '.json');\n  }\n\n  getThresholds() {\n    return this.httpClient.get<ThresholdResponse>(this.thresholdUrl);\n  }\n  // getThresholds(): Observable<ThresholdResponse> {\n  //   return this.httpClient.get<ThresholdResponse>(this.thresholdUrl);\n  // }\n\n  getNetwork(): Observable<Network> {\n    // console.log('Get network: ' + this.networkUrl);\n    return this.httpClient.get<Network>(this.networkUrl);\n  }\n\n\n}\n","import {PatientData} from './patient-data';\nimport {DataLoaderService} from './data-loader.service';\n\nexport class Patient {\n  private dataLoader?: DataLoaderService;\n  public name: string;\n  public mfsYears: number;\n  public subtype: string;\n  public patientData?: PatientData[];\n  private minScore?: number;\n  private maxScore?: number;\n  private minGe?: number;\n  private maxGe?: number;\n\n  constructor(data: any, dataLoader: DataLoaderService) {\n    this.name = data.name;\n    this.mfsYears = data.mfsYears;\n    this.subtype = data.subtype;\n    this.dataLoader = dataLoader;\n    this.loadPatientData();\n  }\n\n  getMinScore() {\n    if (this.minScore === undefined) {\n      this.minScore = this.patientData.reduce((previousValue, currentValue) => {\n        return (previousValue.score < currentValue.score ? previousValue : currentValue);\n      }).score;\n    }\n    return this.minScore;\n  }\n\n  getMaxScore() {\n    if (this.maxScore === undefined) {\n      this.maxScore = this.patientData.reduce((previousValue, currentValue) => {\n        return (previousValue.score > currentValue.score ? previousValue : currentValue);\n      }).score;\n    }\n    return this.maxScore;\n  }\n\n  getMinGe() {\n    if (this.minGe === undefined) {\n      this.minGe = this.patientData.reduce((previousValue, currentValue) => {\n        return (previousValue.ge < currentValue.ge ? previousValue : currentValue);\n      }).ge;\n    }\n    return this.minGe;\n  }\n\n  getMaxGe() {\n    if (this.maxGe === undefined) {\n      this.maxGe = this.patientData.reduce((previousValue, currentValue) => {\n        return (previousValue.ge > currentValue.ge ? previousValue : currentValue);\n      }).ge;\n    }\n    return this.maxGe;\n  }\n\n\n  private loadPatientData(): void {\n    this.dataLoader.getPatientData(this.name).subscribe((data) => {\n      this.patientData = data;\n      // console.log('Patient ' + this.name + ': ' + this.patientData.length);\n    });\n  }\n}\n","import {Patient} from './patient';\nimport {ClassResponse} from './class-response';\nimport {DataLoaderService} from './data-loader.service';\n\nexport class PatientsResponse implements ClassResponse{\n\n  metastatic: Patient[];\n  nonmetastatic: Patient[];\n  geMin: number;\n  geMax: number;\n\n  constructor(data: any, dataLoader: DataLoaderService) {\n    this.geMin = data.geMin;\n    this.geMax = data.geMax;\n    // console.log('ge range init: '+this.geMin+'-'+this.geMax);\n    this.metastatic = data.metastatic.map(pat => new Patient(pat, dataLoader));\n    this.nonmetastatic = data.nonmetastatic.map(pat => new Patient(pat, dataLoader));\n  }\n}\n","import {Threshold} from './threshold';\nimport {ClassResponse} from './class-response';\n\nexport class ThresholdResponse implements ClassResponse {\n  // constructor(public metastatic: Threshold,\n  //             public nonmetastatic: Threshold,\n  //             public multiplier: number = 1000000000) {}\n\n  // public static multiplier = 1000000000;\n  public multiplier: number = 1000000000;\n  public metastatic: Threshold;\n  public nonmetastatic: Threshold;\n  public minThreshold: number;\n  public maxThreshold: number;\n  public selected: number;\n\n  constructor(data:any){\n    this.multiplier = 1000000000;\n    this.metastatic = new Threshold(data.metastatic, this.multiplier);\n    this.nonmetastatic = new Threshold(data.nonmetastatic, this.multiplier);\n    this.minThreshold = Math.min(this.metastatic.threshold, this.nonmetastatic.threshold);\n    this.maxThreshold = Math.max(this.metastatic.max, this.nonmetastatic.max);\n    this.selected = this.minThreshold * this.multiplier;\n  }\n\n  // constructor(data: any) {\n  //   Object.assign(this, data);\n  // }\n  //\n  // public static init(obj: ThresholdResponse){\n  //   obj.multiplier = 1000000000;\n  // }\n\n}\n","export class Threshold {\n\n  public selected: number;\n  public threshold: number;\n  public max: number;\n\n  constructor(data: any, multiplier: number) {\n    this.threshold = data.threshold;\n    this.max = data.max;\n    this.selected = data.threshold * multiplier;\n  }\n\n  // constructor(public threshold: number,\n  //             public max: number) { }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}